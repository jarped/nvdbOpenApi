# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OmrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def omrader_fylker_get(self, x_client, **kwargs):  # noqa: E501
        """omrader_fylker_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_fylker_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Fylke]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.omrader_fylker_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.omrader_fylker_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def omrader_fylker_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """omrader_fylker_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_fylker_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Fylke]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'if_none_match', 'srid', 'inkluder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method omrader_fylker_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `omrader_fylker_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/omrader/fylker', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Fylke]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def omrader_get(self, x_client, **kwargs):  # noqa: E501
        """omrader_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.omrader_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.omrader_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def omrader_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """omrader_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method omrader_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `omrader_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/omrader', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2007]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def omrader_kommuner_get(self, x_client, **kwargs):  # noqa: E501
        """omrader_kommuner_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_kommuner_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Kommune]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.omrader_kommuner_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.omrader_kommuner_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def omrader_kommuner_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """omrader_kommuner_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_kommuner_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Kommune]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'if_none_match', 'srid', 'inkluder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method omrader_kommuner_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `omrader_kommuner_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/omrader/kommuner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Kommune]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def omrader_kontraktomrader_get(self, x_client, **kwargs):  # noqa: E501
        """omrader_kontraktomrader_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_kontraktomrader_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Kontraktsomrade]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.omrader_kontraktomrader_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.omrader_kontraktomrader_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def omrader_kontraktomrader_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """omrader_kontraktomrader_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_kontraktomrader_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Kontraktsomrade]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'if_none_match', 'inkluder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method omrader_kontraktomrader_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `omrader_kontraktomrader_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/omrader/kontraktomrader', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Kontraktsomrade]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def omrader_riksvegruter_get(self, x_client, **kwargs):  # noqa: E501
        """omrader_riksvegruter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_riksvegruter_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Riksvegrute]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.omrader_riksvegruter_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.omrader_riksvegruter_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def omrader_riksvegruter_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """omrader_riksvegruter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.omrader_riksvegruter_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str if_none_match: Dersom header matcher gjeldende E-tag vil 304 returneres
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :return: list[Riksvegrute]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'if_none_match', 'inkluder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method omrader_riksvegruter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `omrader_riksvegruter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/omrader/riksvegruter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Riksvegrute]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
