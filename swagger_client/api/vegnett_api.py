# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VegnettApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def beta_vegnett_rute_get(self, x_client, **kwargs):  # noqa: E501
        """beta_vegnett_rute_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.beta_vegnett_rute_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str start: Startposisjon som et punkt eller posisjon@veglenkesekvens.
        :param str slutt: Sluttposisjon som et punkt eller posisjon@veglenkesekvens
        :param str geometri: Finn sammenhengende vegnett som passer med denne geometrien
        :param int maks_avstand: Maks avstand i meter til veglenker
        :param int omkrets: Konvolutt lagt rund start- og slutt-punkt for å beregne rute
        :param bool konnekteringslenker: Inkludere konnekteringslenker
        :param bool detaljerte_lenker: Inkludere detaljerte lenker
        :param bool kortform: Returner minimal respons
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param bool behold_trafikantgruppe: Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende). Overstyres av parameteren trafikantgruppe.
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param date tidspunkt_start: Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.
        :param date tidspunkt_slutt: Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: RuteRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.beta_vegnett_rute_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.beta_vegnett_rute_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def beta_vegnett_rute_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """beta_vegnett_rute_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.beta_vegnett_rute_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str start: Startposisjon som et punkt eller posisjon@veglenkesekvens.
        :param str slutt: Sluttposisjon som et punkt eller posisjon@veglenkesekvens
        :param str geometri: Finn sammenhengende vegnett som passer med denne geometrien
        :param int maks_avstand: Maks avstand i meter til veglenker
        :param int omkrets: Konvolutt lagt rund start- og slutt-punkt for å beregne rute
        :param bool konnekteringslenker: Inkludere konnekteringslenker
        :param bool detaljerte_lenker: Inkludere detaljerte lenker
        :param bool kortform: Returner minimal respons
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param bool behold_trafikantgruppe: Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende). Overstyres av parameteren trafikantgruppe.
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param date tidspunkt_start: Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.
        :param date tidspunkt_slutt: Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: RuteRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'start', 'slutt', 'geometri', 'maks_avstand', 'omkrets', 'konnekteringslenker', 'detaljerte_lenker', 'kortform', 'vegsystemreferanse', 'trafikantgruppe', 'behold_trafikantgruppe', 'typeveg', 'tidspunkt', 'tidspunkt_start', 'tidspunkt_slutt', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beta_vegnett_rute_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `beta_vegnett_rute_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'slutt' in params:
            query_params.append(('slutt', params['slutt']))  # noqa: E501
        if 'geometri' in params:
            query_params.append(('geometri', params['geometri']))  # noqa: E501
        if 'maks_avstand' in params:
            query_params.append(('maks_avstand', params['maks_avstand']))  # noqa: E501
        if 'omkrets' in params:
            query_params.append(('omkrets', params['omkrets']))  # noqa: E501
        if 'konnekteringslenker' in params:
            query_params.append(('konnekteringslenker', params['konnekteringslenker']))  # noqa: E501
        if 'detaljerte_lenker' in params:
            query_params.append(('detaljerte_lenker', params['detaljerte_lenker']))  # noqa: E501
        if 'kortform' in params:
            query_params.append(('kortform', params['kortform']))  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'trafikantgruppe' in params:
            query_params.append(('trafikantgruppe', params['trafikantgruppe']))  # noqa: E501
        if 'behold_trafikantgruppe' in params:
            query_params.append(('behold_trafikantgruppe', params['behold_trafikantgruppe']))  # noqa: E501
        if 'typeveg' in params:
            query_params.append(('typeveg', params['typeveg']))  # noqa: E501
            collection_formats['typeveg'] = 'space'  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501
        if 'tidspunkt_start' in params:
            query_params.append(('tidspunkt_start', params['tidspunkt_start']))  # noqa: E501
        if 'tidspunkt_slutt' in params:
            query_params.append(('tidspunkt_slutt', params['tidspunkt_slutt']))  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/beta/vegnett/rute', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RuteRespons',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def beta_vegnett_rute_post(self, body, x_client, **kwargs):  # noqa: E501
        """beta_vegnett_rute_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.beta_vegnett_rute_post(body, x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteRequest body: Ruteforespørsel definert som JSON. (required)
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :return: RuteRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.beta_vegnett_rute_post_with_http_info(body, x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.beta_vegnett_rute_post_with_http_info(body, x_client, **kwargs)  # noqa: E501
            return data

    def beta_vegnett_rute_post_with_http_info(self, body, x_client, **kwargs):  # noqa: E501
        """beta_vegnett_rute_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.beta_vegnett_rute_post_with_http_info(body, x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RouteRequest body: Ruteforespørsel definert som JSON. (required)
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :return: RuteRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_client', 'x_client_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beta_vegnett_rute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `beta_vegnett_rute_post`")  # noqa: E501
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `beta_vegnett_rute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/beta/vegnett/rute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RuteRespons',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posisjon_get(self, x_client, **kwargs):  # noqa: E501
        """posisjon_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posisjon_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param float nord: Nordlig koordinat
        :param float ost: Østlig koordinat
        :param float lat: Breddegrad
        :param float lon: Lengdegrad
        :param int maks_avstand: Angir søkeavstand i meter
        :param int maks_antall: Angir hvor mange resultater som maksimum skal returneres
        :param bool konnekteringslenker: Angir om det skal returneres treff på konnekteringslenker
        :param bool detaljerte_lenker: Angir om det skal returneres treff på detaljerte vegnettsnivå
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: list[Posisjonsresultat]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posisjon_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.posisjon_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def posisjon_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """posisjon_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posisjon_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param float nord: Nordlig koordinat
        :param float ost: Østlig koordinat
        :param float lat: Breddegrad
        :param float lon: Lengdegrad
        :param int maks_avstand: Angir søkeavstand i meter
        :param int maks_antall: Angir hvor mange resultater som maksimum skal returneres
        :param bool konnekteringslenker: Angir om det skal returneres treff på konnekteringslenker
        :param bool detaljerte_lenker: Angir om det skal returneres treff på detaljerte vegnettsnivå
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: list[Posisjonsresultat]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'nord', 'ost', 'lat', 'lon', 'maks_avstand', 'maks_antall', 'konnekteringslenker', 'detaljerte_lenker', 'vegsystemreferanse', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posisjon_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `posisjon_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nord' in params:
            query_params.append(('nord', params['nord']))  # noqa: E501
        if 'ost' in params:
            query_params.append(('ost', params['ost']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501
        if 'maks_avstand' in params:
            query_params.append(('maks_avstand', params['maks_avstand']))  # noqa: E501
        if 'maks_antall' in params:
            query_params.append(('maks_antall', params['maks_antall']))  # noqa: E501
        if 'konnekteringslenker' in params:
            query_params.append(('konnekteringslenker', params['konnekteringslenker']))  # noqa: E501
        if 'detaljerte_lenker' in params:
            query_params.append(('detaljerte_lenker', params['detaljerte_lenker']))  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/posisjon', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Posisjonsresultat]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def veg_batch_get(self, **kwargs):  # noqa: E501
        """veg_batch_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.veg_batch_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vegsystemreferanser:
        :param str veglenkesekvenser:
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: dict(str, Posisjonsresultat)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.veg_batch_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.veg_batch_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def veg_batch_get_with_http_info(self, **kwargs):  # noqa: E501
        """veg_batch_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.veg_batch_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vegsystemreferanser:
        :param str veglenkesekvenser:
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: dict(str, Posisjonsresultat)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vegsystemreferanser', 'veglenkesekvenser', 'kommune', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method veg_batch_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vegsystemreferanser' in params:
            query_params.append(('vegsystemreferanser', params['vegsystemreferanser']))  # noqa: E501
        if 'veglenkesekvenser' in params:
            query_params.append(('veglenkesekvenser', params['veglenkesekvenser']))  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/veg/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, Posisjonsresultat)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def veg_get(self, **kwargs):  # noqa: E501
        """veg_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.veg_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html)
        :param str veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `posisjon@veglenkesekvensid`
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :return: Posisjonsresultat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.veg_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.veg_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def veg_get_with_http_info(self, **kwargs):  # noqa: E501
        """veg_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.veg_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html)
        :param str veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `posisjon@veglenkesekvensid`
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :return: Posisjonsresultat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vegsystemreferanse', 'veglenkesekvens', 'srid', 'kommune']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method veg_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vegsystemreferanse' in params:
            query_params.append(('vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
        if 'veglenkesekvens' in params:
            query_params.append(('veglenkesekvens', params['veglenkesekvens']))  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/veg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Posisjonsresultat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_get(self, x_client, **kwargs):  # noqa: E501
        """vegnett_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :return: list[InlineResponse2006]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegnett_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegnett_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :return: list[InlineResponse2006]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2006]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_noder_get(self, x_client, **kwargs):  # noqa: E501
        """vegnett_noder_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_noder_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[int] ider: Filtrer på objekter med id. Kommaseparert
        :param str topologiniv: Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.
        :param int superid: Hent alle noder med tilkobling til veglenker som har veglenke med oppgitt id som \"forelder\" i overordnet topologinivå.
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :return: VegnoderListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_noder_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_noder_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegnett_noder_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegnett_noder_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_noder_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[int] ider: Filtrer på objekter med id. Kommaseparert
        :param str topologiniv: Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.
        :param int superid: Hent alle noder med tilkobling til veglenker som har veglenke med oppgitt id som \"forelder\" i overordnet topologinivå.
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :return: VegnoderListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'ider', 'topologiniv', 'superid', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'vegsystemreferanse', 'kartutnitt', 'polygon', 'tidspunkt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_noder_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_noder_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ider' in params:
            query_params.append(('ider', params['ider']))  # noqa: E501
            collection_formats['ider'] = 'space'  # noqa: E501
        if 'topologiniv' in params:
            query_params.append(('topologinivå', params['topologiniv']))  # noqa: E501
        if 'superid' in params:
            query_params.append(('superid', params['superid']))  # noqa: E501
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett/noder', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VegnoderListeRespons',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_noder_nodeid_get(self, x_client, nodeid, **kwargs):  # noqa: E501
        """vegnett_noder_nodeid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_noder_nodeid_get(x_client, nodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int nodeid: (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: Vegnode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_noder_nodeid_get_with_http_info(x_client, nodeid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_noder_nodeid_get_with_http_info(x_client, nodeid, **kwargs)  # noqa: E501
            return data

    def vegnett_noder_nodeid_get_with_http_info(self, x_client, nodeid, **kwargs):  # noqa: E501
        """vegnett_noder_nodeid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_noder_nodeid_get_with_http_info(x_client, nodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int nodeid: (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: Vegnode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'nodeid', 'x_client_session', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_noder_nodeid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_noder_nodeid_get`")  # noqa: E501
        # verify the required parameter 'nodeid' is set
        if ('nodeid' not in params or
                params['nodeid'] is None):
            raise ValueError("Missing the required parameter `nodeid` when calling `vegnett_noder_nodeid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nodeid' in params:
            path_params['nodeid'] = params['nodeid']  # noqa: E501

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett/noder/{nodeid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vegnode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_veglenkesekvenser_get(self, x_client, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[int] ider: Filtrer på objekter med id. Kommaseparert
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str topologiniv: Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.
        :param int superid: Hent detaljerte veglenkesekvenser stedfestet på veglenkesekvens med denne id
        :param int antall: Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.
        :param str start: Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.
        :return: VeglenkesekvensListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_veglenkesekvenser_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_veglenkesekvenser_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegnett_veglenkesekvenser_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[int] ider: Filtrer på objekter med id. Kommaseparert
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str topologiniv: Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.
        :param int superid: Hent detaljerte veglenkesekvenser stedfestet på veglenkesekvens med denne id
        :param int antall: Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.
        :param str start: Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.
        :return: VeglenkesekvensListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'ider', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'vegsystemreferanse', 'kartutnitt', 'polygon', 'topologiniv', 'superid', 'antall', 'start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_veglenkesekvenser_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_veglenkesekvenser_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ider' in params:
            query_params.append(('ider', params['ider']))  # noqa: E501
            collection_formats['ider'] = 'space'  # noqa: E501
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'topologiniv' in params:
            query_params.append(('topologinivå', params['topologiniv']))  # noqa: E501
        if 'superid' in params:
            query_params.append(('superid', params['superid']))  # noqa: E501
        if 'antall' in params:
            query_params.append(('antall', params['antall']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett/veglenkesekvenser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VeglenkesekvensListeRespons',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_veglenkesekvenser_segmentert_get(self, x_client, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_segmentert_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_segmentert_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param bool historisk: Ved `true` returneres også segmenter med sluttdato
        :param bool arm: Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»
        :param bool kryssystem: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem
        :param bool sideanlegg: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg
        :param str detaljniva: Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param str adskiltelop: Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»
        :param list[str] veglenketype: Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :return: VeglenkesegmentListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_veglenkesekvenser_segmentert_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_veglenkesekvenser_segmentert_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegnett_veglenkesekvenser_segmentert_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_segmentert_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_segmentert_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param bool historisk: Ved `true` returneres også segmenter med sluttdato
        :param bool arm: Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»
        :param bool kryssystem: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem
        :param bool sideanlegg: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg
        :param str detaljniva: Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param str adskiltelop: Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»
        :param list[str] veglenketype: Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :return: VeglenkesegmentListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'vegsystemreferanse', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'kartutnitt', 'polygon', 'tidspunkt', 'historisk', 'arm', 'kryssystem', 'sideanlegg', 'detaljniva', 'typeveg', 'adskiltelop', 'veglenketype', 'trafikantgruppe', 'geometritoleranse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_veglenkesekvenser_segmentert_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_veglenkesekvenser_segmentert_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501
        if 'historisk' in params:
            query_params.append(('historisk', params['historisk']))  # noqa: E501
        if 'arm' in params:
            query_params.append(('arm', params['arm']))  # noqa: E501
        if 'kryssystem' in params:
            query_params.append(('kryssystem', params['kryssystem']))  # noqa: E501
        if 'sideanlegg' in params:
            query_params.append(('sideanlegg', params['sideanlegg']))  # noqa: E501
        if 'detaljniva' in params:
            query_params.append(('detaljniva', params['detaljniva']))  # noqa: E501
        if 'typeveg' in params:
            query_params.append(('typeveg', params['typeveg']))  # noqa: E501
            collection_formats['typeveg'] = 'space'  # noqa: E501
        if 'adskiltelop' in params:
            query_params.append(('adskiltelop', params['adskiltelop']))  # noqa: E501
        if 'veglenketype' in params:
            query_params.append(('veglenketype', params['veglenketype']))  # noqa: E501
            collection_formats['veglenketype'] = 'multi'  # noqa: E501
        if 'trafikantgruppe' in params:
            query_params.append(('trafikantgruppe', params['trafikantgruppe']))  # noqa: E501
        if 'geometritoleranse' in params:
            query_params.append(('geometritoleranse', params['geometritoleranse']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett/veglenkesekvenser/segmentert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VeglenkesegmentListeRespons',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get(self, x_client, veglenkesekvensid, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get(x_client, veglenkesekvensid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int veglenkesekvensid: (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param bool historisk: Ved `true` returneres også segmenter med sluttdato
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: list[Veglenkesegment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get_with_http_info(x_client, veglenkesekvensid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get_with_http_info(x_client, veglenkesekvensid, **kwargs)  # noqa: E501
            return data

    def vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get_with_http_info(self, x_client, veglenkesekvensid, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get_with_http_info(x_client, veglenkesekvensid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int veglenkesekvensid: (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param bool historisk: Ved `true` returneres også segmenter med sluttdato
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: list[Veglenkesegment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'veglenkesekvensid', 'x_client_session', 'historisk', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get`")  # noqa: E501
        # verify the required parameter 'veglenkesekvensid' is set
        if ('veglenkesekvensid' not in params or
                params['veglenkesekvensid'] is None):
            raise ValueError("Missing the required parameter `veglenkesekvensid` when calling `vegnett_veglenkesekvenser_segmentert_veglenkesekvensid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'veglenkesekvensid' in params:
            path_params['veglenkesekvensid'] = params['veglenkesekvensid']  # noqa: E501

        query_params = []
        if 'historisk' in params:
            query_params.append(('historisk', params['historisk']))  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett/veglenkesekvenser/segmentert/{veglenkesekvensid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Veglenkesegment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegnett_veglenkesekvenser_veglenkesekvensid_get(self, x_client, veglenkesekvensid, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_veglenkesekvensid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_veglenkesekvensid_get(x_client, veglenkesekvensid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int veglenkesekvensid: (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: Veglenkesekvens
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegnett_veglenkesekvenser_veglenkesekvensid_get_with_http_info(x_client, veglenkesekvensid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegnett_veglenkesekvenser_veglenkesekvensid_get_with_http_info(x_client, veglenkesekvensid, **kwargs)  # noqa: E501
            return data

    def vegnett_veglenkesekvenser_veglenkesekvensid_get_with_http_info(self, x_client, veglenkesekvensid, **kwargs):  # noqa: E501
        """vegnett_veglenkesekvenser_veglenkesekvensid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegnett_veglenkesekvenser_veglenkesekvensid_get_with_http_info(x_client, veglenkesekvensid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int veglenkesekvensid: (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :return: Veglenkesekvens
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'veglenkesekvensid', 'x_client_session', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegnett_veglenkesekvenser_veglenkesekvensid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegnett_veglenkesekvenser_veglenkesekvensid_get`")  # noqa: E501
        # verify the required parameter 'veglenkesekvensid' is set
        if ('veglenkesekvensid' not in params or
                params['veglenkesekvensid'] is None):
            raise ValueError("Missing the required parameter `veglenkesekvensid` when calling `vegnett_veglenkesekvenser_veglenkesekvensid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'veglenkesekvensid' in params:
            path_params['veglenkesekvensid'] = params['veglenkesekvensid']  # noqa: E501

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegnett/veglenkesekvenser/{veglenkesekvensid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Veglenkesekvens',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
