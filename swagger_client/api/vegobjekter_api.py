# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VegobjekterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def vegobjekt_get(self, x_client, **kwargs):  # noqa: E501
        """vegobjekt_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekt_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param int id: Id for objektet
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekt_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekt_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegobjekt_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegobjekt_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekt_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param int id: Id for objektet
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekt_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekt_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_get(self, x_client, **kwargs):  # noqa: E501
        """vegobjekter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param bool statistikk: Om statistikk skal inkluderes.
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :return: list[VegobjekttypeStatistikk]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegobjekter_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegobjekter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param bool statistikk: Om statistikk skal inkluderes.
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :return: list[VegobjekttypeStatistikk]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'statistikk', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'vegsystemreferanse', 'veglenkesekvens', 'kartutnitt', 'polygon', 'tidspunkt', 'overlapp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'statistikk' in params:
            query_params.append(('statistikk', params['statistikk']))  # noqa: E501
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'veglenkesekvens' in params:
            query_params.append(('Veglenkesekvens', params['veglenkesekvens']))  # noqa: E501
            collection_formats['Veglenkesekvens'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501
        if 'overlapp' in params:
            query_params.append(('Overlapp', params['overlapp']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VegobjekttypeStatistikk]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_statistikk_get(self, x_client, **kwargs):  # noqa: E501
        """vegobjekter_statistikk_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_statistikk_get(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :return: list[VegobjekttypeStatistikk]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_statistikk_get_with_http_info(x_client, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_statistikk_get_with_http_info(x_client, **kwargs)  # noqa: E501
            return data

    def vegobjekter_statistikk_get_with_http_info(self, x_client, **kwargs):  # noqa: E501
        """vegobjekter_statistikk_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_statistikk_get_with_http_info(x_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :return: list[VegobjekttypeStatistikk]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'x_client_session', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'vegsystemreferanse', 'veglenkesekvens', 'kartutnitt', 'polygon', 'tidspunkt', 'overlapp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_statistikk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_statistikk_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'veglenkesekvens' in params:
            query_params.append(('Veglenkesekvens', params['veglenkesekvens']))  # noqa: E501
            collection_formats['Veglenkesekvens'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501
        if 'overlapp' in params:
            query_params.append(('Overlapp', params['overlapp']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/statistikk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VegobjekttypeStatistikk]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_vegobjekttypeid_get(self, x_client, vegobjekttypeid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_get(x_client, vegobjekttypeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for vegobjekttype som skal hentes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param bool segmentering: Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :param bool arm: Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»
        :param list[str] veglenketype: Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.
        :param str adskiltelop: Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param str detaljniva: Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).
        :param bool kryssystem: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem
        :param bool sideanlegg: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param int antall: Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.
        :param str start: Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.
        :param str egenskap: Filtrer vegobjekter på egenskapene de har Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap=\"<egenskapstype><operator><verdi>\"`           Det er støtte for følgende operatorer: * `=` - lik * `!=` - ulik * `<` - større enn * `>` - mindre enn, * `>=` - større enn, eller lik * `<=` - mindre enn, eller lik  Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato. Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall. Tekst og tidspunkt må markeres med enkle anførselstegn. For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id. Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper. Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger. Wildcard * kan benyttes for tekst og datoer. Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).  *Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret. Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter. Relaterte objekter filtreres ved bruk av funksjonen relasjon. Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter. Eksempel: `?egenskap=\"relasjon(67, egenskap(1317)>2000\"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :param list[int] ider: Hent objekter med de oppgitte idene. Kommaseparert.
        :param bool alle_versjoner: Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.
        :param datetime endret_etter: hent alle objekter som er endret etter det gitte tidspunkt.
        :return: VegobjektListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_vegobjekttypeid_get_with_http_info(x_client, vegobjekttypeid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_vegobjekttypeid_get_with_http_info(x_client, vegobjekttypeid, **kwargs)  # noqa: E501
            return data

    def vegobjekter_vegobjekttypeid_get_with_http_info(self, x_client, vegobjekttypeid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_get_with_http_info(x_client, vegobjekttypeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for vegobjekttype som skal hentes. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param bool segmentering: Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :param bool arm: Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»
        :param list[str] veglenketype: Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.
        :param str adskiltelop: Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param str detaljniva: Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).
        :param bool kryssystem: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem
        :param bool sideanlegg: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param int antall: Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.
        :param str start: Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.
        :param str egenskap: Filtrer vegobjekter på egenskapene de har Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap=\"<egenskapstype><operator><verdi>\"`           Det er støtte for følgende operatorer: * `=` - lik * `!=` - ulik * `<` - større enn * `>` - mindre enn, * `>=` - større enn, eller lik * `<=` - mindre enn, eller lik  Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato. Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall. Tekst og tidspunkt må markeres med enkle anførselstegn. For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id. Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper. Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger. Wildcard * kan benyttes for tekst og datoer. Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).  *Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret. Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter. Relaterte objekter filtreres ved bruk av funksjonen relasjon. Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter. Eksempel: `?egenskap=\"relasjon(67, egenskap(1317)>2000\"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :param list[int] ider: Hent objekter med de oppgitte idene. Kommaseparert.
        :param bool alle_versjoner: Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.
        :param datetime endret_etter: hent alle objekter som er endret etter det gitte tidspunkt.
        :return: VegobjektListeRespons
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'vegobjekttypeid', 'x_client_session', 'inkluder', 'srid', 'geometritoleranse', 'inkludergeometri', 'inkluder_egenskaper', 'segmentering', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'vegsystemreferanse', 'veglenkesekvens', 'kartutnitt', 'polygon', 'tidspunkt', 'overlapp', 'arm', 'veglenketype', 'adskiltelop', 'typeveg', 'detaljniva', 'kryssystem', 'sideanlegg', 'trafikantgruppe', 'antall', 'start', 'egenskap', 'dybde', 'ider', 'alle_versjoner', 'endret_etter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_vegobjekttypeid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_vegobjekttypeid_get`")  # noqa: E501
        # verify the required parameter 'vegobjekttypeid' is set
        if ('vegobjekttypeid' not in params or
                params['vegobjekttypeid'] is None):
            raise ValueError("Missing the required parameter `vegobjekttypeid` when calling `vegobjekter_vegobjekttypeid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vegobjekttypeid' in params:
            path_params['vegobjekttypeid'] = params['vegobjekttypeid']  # noqa: E501

        query_params = []
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'geometritoleranse' in params:
            query_params.append(('geometritoleranse', params['geometritoleranse']))  # noqa: E501
        if 'inkludergeometri' in params:
            query_params.append(('inkludergeometri', params['inkludergeometri']))  # noqa: E501
        if 'inkluder_egenskaper' in params:
            query_params.append(('inkluder_egenskaper', params['inkluder_egenskaper']))  # noqa: E501
        if 'segmentering' in params:
            query_params.append(('segmentering', params['segmentering']))  # noqa: E501
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'veglenkesekvens' in params:
            query_params.append(('Veglenkesekvens', params['veglenkesekvens']))  # noqa: E501
            collection_formats['Veglenkesekvens'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501
        if 'overlapp' in params:
            query_params.append(('Overlapp', params['overlapp']))  # noqa: E501
        if 'arm' in params:
            query_params.append(('arm', params['arm']))  # noqa: E501
        if 'veglenketype' in params:
            query_params.append(('veglenketype', params['veglenketype']))  # noqa: E501
            collection_formats['veglenketype'] = 'multi'  # noqa: E501
        if 'adskiltelop' in params:
            query_params.append(('adskiltelop', params['adskiltelop']))  # noqa: E501
        if 'typeveg' in params:
            query_params.append(('typeveg', params['typeveg']))  # noqa: E501
            collection_formats['typeveg'] = 'space'  # noqa: E501
        if 'detaljniva' in params:
            query_params.append(('detaljniva', params['detaljniva']))  # noqa: E501
        if 'kryssystem' in params:
            query_params.append(('kryssystem', params['kryssystem']))  # noqa: E501
        if 'sideanlegg' in params:
            query_params.append(('sideanlegg', params['sideanlegg']))  # noqa: E501
        if 'trafikantgruppe' in params:
            query_params.append(('trafikantgruppe', params['trafikantgruppe']))  # noqa: E501
        if 'antall' in params:
            query_params.append(('antall', params['antall']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'egenskap' in params:
            query_params.append(('egenskap', params['egenskap']))  # noqa: E501
        if 'dybde' in params:
            query_params.append(('dybde', params['dybde']))  # noqa: E501
        if 'ider' in params:
            query_params.append(('ider', params['ider']))  # noqa: E501
            collection_formats['ider'] = 'multi'  # noqa: E501
        if 'alle_versjoner' in params:
            query_params.append(('alle_versjoner', params['alle_versjoner']))  # noqa: E501
        if 'endret_etter' in params:
            query_params.append(('endret_etter', params['endret_etter']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/{vegobjekttypeid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VegobjektListeRespons',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_vegobjekttypeid_statistikk_get(self, x_client, vegobjekttypeid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_statistikk_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_statistikk_get(x_client, vegobjekttypeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for vegobjekttype som skal hentes statistikk for. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param bool segmentering: Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :param bool arm: Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»
        :param list[str] veglenketype: Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.
        :param str adskiltelop: Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param str detaljniva: Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).
        :param bool kryssystem: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem
        :param bool sideanlegg: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param str egenskap: Filtrer vegobjekter på egenskapene de har Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap=\"<egenskapstype><operator><verdi>\"`           Det er støtte for følgende operatorer: * `=` - lik * `!=` - ulik * `<` - større enn * `>` - mindre enn, * `>=` - større enn, eller lik * `<=` - mindre enn, eller lik  Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato. Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall. Tekst og tidspunkt må markeres med enkle anførselstegn. For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id. Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper. Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger. Wildcard * kan benyttes for tekst og datoer. Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).  *Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret. Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter. Relaterte objekter filtreres ved bruk av funksjonen relasjon. Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter. Eksempel: `?egenskap=\"relasjon(67, egenskap(1317)>2000\"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)
        :param bool alle_versjoner: Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.
        :param datetime endret_etter: hent alle objekter som er endret etter det gitte tidspunkt.
        :return: Statistikk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_vegobjekttypeid_statistikk_get_with_http_info(x_client, vegobjekttypeid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_vegobjekttypeid_statistikk_get_with_http_info(x_client, vegobjekttypeid, **kwargs)  # noqa: E501
            return data

    def vegobjekter_vegobjekttypeid_statistikk_get_with_http_info(self, x_client, vegobjekttypeid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_statistikk_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_statistikk_get_with_http_info(x_client, vegobjekttypeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for vegobjekttype som skal hentes statistikk for. (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param bool segmentering: Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).
        :param list[int] fylke: Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.
        :param list[int] kommune: Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.
        :param list[str] kontraktsomrade: Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.
        :param list[str] riksvegrute: Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.
        :param list[str] vegsystemreferanse: Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html) Kommaseparert liste.
        :param list[str] veglenkesekvens: Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.
        :param str kartutnitt: Filtrer vegobjekter med kartutnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param str polygon: Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)
        :param date tidspunkt: Begrense spørring til det gitte tidspunktet
        :param str overlapp: Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=<objekttypeid>[(egenskap(attributtid)=\"verdi\" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)
        :param bool arm: Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»
        :param list[str] veglenketype: Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.
        :param str adskiltelop: Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»
        :param list[str] typeveg: Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.
        :param str detaljniva: Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).
        :param bool kryssystem: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem
        :param bool sideanlegg: Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg
        :param str trafikantgruppe: Filtrer vegobjekter på trafikantgruppe
        :param str egenskap: Filtrer vegobjekter på egenskapene de har Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap=\"<egenskapstype><operator><verdi>\"`           Det er støtte for følgende operatorer: * `=` - lik * `!=` - ulik * `<` - større enn * `>` - mindre enn, * `>=` - større enn, eller lik * `<=` - mindre enn, eller lik  Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato. Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall. Tekst og tidspunkt må markeres med enkle anførselstegn. For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id. Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper. Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger. Wildcard * kan benyttes for tekst og datoer. Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).  *Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret. Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter. Relaterte objekter filtreres ved bruk av funksjonen relasjon. Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter. Eksempel: `?egenskap=\"relasjon(67, egenskap(1317)>2000\"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)
        :param bool alle_versjoner: Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.
        :param datetime endret_etter: hent alle objekter som er endret etter det gitte tidspunkt.
        :return: Statistikk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'vegobjekttypeid', 'x_client_session', 'srid', 'segmentering', 'fylke', 'kommune', 'kontraktsomrade', 'riksvegrute', 'vegsystemreferanse', 'veglenkesekvens', 'kartutnitt', 'polygon', 'tidspunkt', 'overlapp', 'arm', 'veglenketype', 'adskiltelop', 'typeveg', 'detaljniva', 'kryssystem', 'sideanlegg', 'trafikantgruppe', 'egenskap', 'alle_versjoner', 'endret_etter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_vegobjekttypeid_statistikk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_vegobjekttypeid_statistikk_get`")  # noqa: E501
        # verify the required parameter 'vegobjekttypeid' is set
        if ('vegobjekttypeid' not in params or
                params['vegobjekttypeid'] is None):
            raise ValueError("Missing the required parameter `vegobjekttypeid` when calling `vegobjekter_vegobjekttypeid_statistikk_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vegobjekttypeid' in params:
            path_params['vegobjekttypeid'] = params['vegobjekttypeid']  # noqa: E501

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'segmentering' in params:
            query_params.append(('segmentering', params['segmentering']))  # noqa: E501
        if 'fylke' in params:
            query_params.append(('Fylke', params['fylke']))  # noqa: E501
            collection_formats['Fylke'] = 'space'  # noqa: E501
        if 'kommune' in params:
            query_params.append(('Kommune', params['kommune']))  # noqa: E501
            collection_formats['Kommune'] = 'space'  # noqa: E501
        if 'kontraktsomrade' in params:
            query_params.append(('Kontraktsomrade', params['kontraktsomrade']))  # noqa: E501
            collection_formats['Kontraktsomrade'] = 'space'  # noqa: E501
        if 'riksvegrute' in params:
            query_params.append(('Riksvegrute', params['riksvegrute']))  # noqa: E501
            collection_formats['Riksvegrute'] = 'space'  # noqa: E501
        if 'vegsystemreferanse' in params:
            query_params.append(('Vegsystemreferanse', params['vegsystemreferanse']))  # noqa: E501
            collection_formats['Vegsystemreferanse'] = 'space'  # noqa: E501
        if 'veglenkesekvens' in params:
            query_params.append(('Veglenkesekvens', params['veglenkesekvens']))  # noqa: E501
            collection_formats['Veglenkesekvens'] = 'space'  # noqa: E501
        if 'kartutnitt' in params:
            query_params.append(('Kartutnitt', params['kartutnitt']))  # noqa: E501
        if 'polygon' in params:
            query_params.append(('Polygon', params['polygon']))  # noqa: E501
        if 'tidspunkt' in params:
            query_params.append(('tidspunkt', params['tidspunkt']))  # noqa: E501
        if 'overlapp' in params:
            query_params.append(('Overlapp', params['overlapp']))  # noqa: E501
        if 'arm' in params:
            query_params.append(('arm', params['arm']))  # noqa: E501
        if 'veglenketype' in params:
            query_params.append(('veglenketype', params['veglenketype']))  # noqa: E501
            collection_formats['veglenketype'] = 'multi'  # noqa: E501
        if 'adskiltelop' in params:
            query_params.append(('adskiltelop', params['adskiltelop']))  # noqa: E501
        if 'typeveg' in params:
            query_params.append(('typeveg', params['typeveg']))  # noqa: E501
            collection_formats['typeveg'] = 'space'  # noqa: E501
        if 'detaljniva' in params:
            query_params.append(('detaljniva', params['detaljniva']))  # noqa: E501
        if 'kryssystem' in params:
            query_params.append(('kryssystem', params['kryssystem']))  # noqa: E501
        if 'sideanlegg' in params:
            query_params.append(('sideanlegg', params['sideanlegg']))  # noqa: E501
        if 'trafikantgruppe' in params:
            query_params.append(('trafikantgruppe', params['trafikantgruppe']))  # noqa: E501
        if 'egenskap' in params:
            query_params.append(('egenskap', params['egenskap']))  # noqa: E501
        if 'alle_versjoner' in params:
            query_params.append(('alle_versjoner', params['alle_versjoner']))  # noqa: E501
        if 'endret_etter' in params:
            query_params.append(('endret_etter', params['endret_etter']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/{vegobjekttypeid}/statistikk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Statistikk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_vegobjekttypeid_vegobjektid_get(self, x_client, vegobjekttypeid, vegobjektid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_get(x_client, vegobjekttypeid, vegobjektid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_vegobjekttypeid_vegobjektid_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_vegobjekttypeid_vegobjektid_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, **kwargs)  # noqa: E501
            return data

    def vegobjekter_vegobjekttypeid_vegobjektid_get_with_http_info(self, x_client, vegobjekttypeid, vegobjektid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'vegobjekttypeid', 'vegobjektid', 'x_client_session', 'srid', 'inkluder', 'inkludergeometri', 'inkluder_egenskaper', 'geometritoleranse', 'dybde']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_vegobjekttypeid_vegobjektid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_vegobjekttypeid_vegobjektid_get`")  # noqa: E501
        # verify the required parameter 'vegobjekttypeid' is set
        if ('vegobjekttypeid' not in params or
                params['vegobjekttypeid'] is None):
            raise ValueError("Missing the required parameter `vegobjekttypeid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_get`")  # noqa: E501
        # verify the required parameter 'vegobjektid' is set
        if ('vegobjektid' not in params or
                params['vegobjektid'] is None):
            raise ValueError("Missing the required parameter `vegobjektid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vegobjekttypeid' in params:
            path_params['vegobjekttypeid'] = params['vegobjekttypeid']  # noqa: E501
        if 'vegobjektid' in params:
            path_params['vegobjektid'] = params['vegobjektid']  # noqa: E501

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501
        if 'inkludergeometri' in params:
            query_params.append(('inkludergeometri', params['inkludergeometri']))  # noqa: E501
        if 'inkluder_egenskaper' in params:
            query_params.append(('inkluder_egenskaper', params['inkluder_egenskaper']))  # noqa: E501
        if 'geometritoleranse' in params:
            query_params.append(('geometritoleranse', params['geometritoleranse']))  # noqa: E501
        if 'dybde' in params:
            query_params.append(('dybde', params['dybde']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/{vegobjekttypeid}/{vegobjektid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get(self, vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get(vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param int versjon: versjon av objektet (required)
        :param int egenskapid: Id for binæregenskapen som refererer til blob (required)
        :param int binaerobjektid: blob_id fra binæregenskap (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get_with_http_info(vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get_with_http_info(vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, **kwargs)  # noqa: E501
            return data

    def vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get_with_http_info(self, vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get_with_http_info(vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param int versjon: versjon av objektet (required)
        :param int egenskapid: Id for binæregenskapen som refererer til blob (required)
        :param int binaerobjektid: blob_id fra binæregenskap (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vegobjekttypeid', 'vegobjektid', 'versjon', 'egenskapid', 'binaerobjektid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vegobjekttypeid' is set
        if ('vegobjekttypeid' not in params or
                params['vegobjekttypeid'] is None):
            raise ValueError("Missing the required parameter `vegobjekttypeid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get`")  # noqa: E501
        # verify the required parameter 'vegobjektid' is set
        if ('vegobjektid' not in params or
                params['vegobjektid'] is None):
            raise ValueError("Missing the required parameter `vegobjektid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get`")  # noqa: E501
        # verify the required parameter 'versjon' is set
        if ('versjon' not in params or
                params['versjon'] is None):
            raise ValueError("Missing the required parameter `versjon` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get`")  # noqa: E501
        # verify the required parameter 'egenskapid' is set
        if ('egenskapid' not in params or
                params['egenskapid'] is None):
            raise ValueError("Missing the required parameter `egenskapid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get`")  # noqa: E501
        # verify the required parameter 'binaerobjektid' is set
        if ('binaerobjektid' not in params or
                params['binaerobjektid'] is None):
            raise ValueError("Missing the required parameter `binaerobjektid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_egenskaper_egenskapid_binaerobjektid_binaer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vegobjekttypeid' in params:
            path_params['vegobjekttypeid'] = params['vegobjekttypeid']  # noqa: E501
        if 'vegobjektid' in params:
            path_params['vegobjektid'] = params['vegobjektid']  # noqa: E501
        if 'versjon' in params:
            path_params['versjon'] = params['versjon']  # noqa: E501
        if 'egenskapid' in params:
            path_params['egenskapid'] = params['egenskapid']  # noqa: E501
        if 'binaerobjektid' in params:
            path_params['binaerobjektid'] = params['binaerobjektid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/{vegobjekttypeid}/{vegobjektid}/{versjon}/egenskaper/{egenskapid}/{binaerobjektid}/binaer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_vegobjekttypeid_vegobjektid_versjon_get(self, x_client, vegobjekttypeid, vegobjektid, versjon, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_versjon_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_versjon_get(x_client, vegobjekttypeid, vegobjektid, versjon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param int versjon: versjon av objektet (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :return: Vegobjekt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_vegobjekttypeid_vegobjektid_versjon_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, versjon, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_vegobjekttypeid_vegobjektid_versjon_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, versjon, **kwargs)  # noqa: E501
            return data

    def vegobjekter_vegobjekttypeid_vegobjektid_versjon_get_with_http_info(self, x_client, vegobjekttypeid, vegobjektid, versjon, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_versjon_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_versjon_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, versjon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param int versjon: versjon av objektet (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :return: Vegobjekt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'vegobjekttypeid', 'vegobjektid', 'versjon', 'x_client_session', 'srid', 'inkluder', 'inkludergeometri', 'inkluder_egenskaper', 'geometritoleranse', 'dybde']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_vegobjekttypeid_vegobjektid_versjon_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_get`")  # noqa: E501
        # verify the required parameter 'vegobjekttypeid' is set
        if ('vegobjekttypeid' not in params or
                params['vegobjekttypeid'] is None):
            raise ValueError("Missing the required parameter `vegobjekttypeid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_get`")  # noqa: E501
        # verify the required parameter 'vegobjektid' is set
        if ('vegobjektid' not in params or
                params['vegobjektid'] is None):
            raise ValueError("Missing the required parameter `vegobjektid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_get`")  # noqa: E501
        # verify the required parameter 'versjon' is set
        if ('versjon' not in params or
                params['versjon'] is None):
            raise ValueError("Missing the required parameter `versjon` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjon_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vegobjekttypeid' in params:
            path_params['vegobjekttypeid'] = params['vegobjekttypeid']  # noqa: E501
        if 'vegobjektid' in params:
            path_params['vegobjektid'] = params['vegobjektid']  # noqa: E501
        if 'versjon' in params:
            path_params['versjon'] = params['versjon']  # noqa: E501

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501
        if 'inkludergeometri' in params:
            query_params.append(('inkludergeometri', params['inkludergeometri']))  # noqa: E501
        if 'inkluder_egenskaper' in params:
            query_params.append(('inkluder_egenskaper', params['inkluder_egenskaper']))  # noqa: E501
        if 'geometritoleranse' in params:
            query_params.append(('geometritoleranse', params['geometritoleranse']))  # noqa: E501
        if 'dybde' in params:
            query_params.append(('dybde', params['dybde']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/{vegobjekttypeid}/{vegobjektid}/{versjon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vegobjekt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get(self, x_client, vegobjekttypeid, vegobjektid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get(x_client, vegobjekttypeid, vegobjektid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :return: list[Vegobjekt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, **kwargs)  # noqa: E501
        else:
            (data) = self.vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, **kwargs)  # noqa: E501
            return data

    def vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get_with_http_info(self, x_client, vegobjekttypeid, vegobjektid, **kwargs):  # noqa: E501
        """vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get_with_http_info(x_client, vegobjekttypeid, vegobjektid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_client: Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes. (required)
        :param int vegobjekttypeid: Id for objektets vegobjekttype (required)
        :param int vegobjektid: Id for objektet (required)
        :param str x_client_session: Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)
        :param str srid: Angir hvilket geografisk referansesystem geometrien skal returneres i.   Mer informasjon: [EPSG:6173](https://epsg.io/6173) [EPSG:6173 i NVDB](https://github.com/nvdb-vegdata/utviklerkonferanse-2018/blob/master/doc/epsg6173.md) [EPSG:4326](http://epsg.io/4326)
        :param list[str] inkluder: kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.
        :param str inkludergeometri: Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri. Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`. I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle), slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`
        :param str inkluder_egenskaper: Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`. `basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.
        :param int geometritoleranse: Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.
        :param str dybde: Hvor mange nivå datterobjekter som skal inkluderes
        :return: list[Vegobjekt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client', 'vegobjekttypeid', 'vegobjektid', 'x_client_session', 'srid', 'inkluder', 'inkludergeometri', 'inkluder_egenskaper', 'geometritoleranse', 'dybde']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client' is set
        if ('x_client' not in params or
                params['x_client'] is None):
            raise ValueError("Missing the required parameter `x_client` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get`")  # noqa: E501
        # verify the required parameter 'vegobjekttypeid' is set
        if ('vegobjekttypeid' not in params or
                params['vegobjekttypeid'] is None):
            raise ValueError("Missing the required parameter `vegobjekttypeid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get`")  # noqa: E501
        # verify the required parameter 'vegobjektid' is set
        if ('vegobjektid' not in params or
                params['vegobjektid'] is None):
            raise ValueError("Missing the required parameter `vegobjektid` when calling `vegobjekter_vegobjekttypeid_vegobjektid_versjoner_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vegobjekttypeid' in params:
            path_params['vegobjekttypeid'] = params['vegobjekttypeid']  # noqa: E501
        if 'vegobjektid' in params:
            path_params['vegobjektid'] = params['vegobjektid']  # noqa: E501

        query_params = []
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'inkluder' in params:
            query_params.append(('inkluder', params['inkluder']))  # noqa: E501
            collection_formats['inkluder'] = 'space'  # noqa: E501
        if 'inkludergeometri' in params:
            query_params.append(('inkludergeometri', params['inkludergeometri']))  # noqa: E501
        if 'inkluder_egenskaper' in params:
            query_params.append(('inkluder_egenskaper', params['inkluder_egenskaper']))  # noqa: E501
        if 'geometritoleranse' in params:
            query_params.append(('geometritoleranse', params['geometritoleranse']))  # noqa: E501
        if 'dybde' in params:
            query_params.append(('dybde', params['dybde']))  # noqa: E501

        header_params = {}
        if 'x_client' in params:
            header_params['X-Client'] = params['x_client']  # noqa: E501
        if 'x_client_session' in params:
            header_params['X-Client-Session'] = params['x_client_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.vegvesen.nvdb-v3-rev1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vegobjekter/{vegobjekttypeid}/{vegobjektid}/versjoner', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Vegobjekt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
