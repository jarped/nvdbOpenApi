# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumVerdiBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'kortnavn': 'str',
        'kortnavnlengde': 'int',
        'kortnavn_brukbar': 'bool',
        'beskrivelse': 'str',
        'sorteringsnummer': 'int',
        'objektliste_dato': 'date',
        'sluttdato': 'date',
        'standardverdi': 'bool',
        'komplementr_enumverdi': 'int'
    }

    attribute_map = {
        'id': 'id',
        'kortnavn': 'kortnavn',
        'kortnavnlengde': 'kortnavnlengde',
        'kortnavn_brukbar': 'kortnavn_brukbar',
        'beskrivelse': 'beskrivelse',
        'sorteringsnummer': 'sorteringsnummer',
        'objektliste_dato': 'objektliste_dato',
        'sluttdato': 'sluttdato',
        'standardverdi': 'standardverdi',
        'komplementr_enumverdi': 'komplementær_enumverdi'
    }

    def __init__(self, id=None, kortnavn=None, kortnavnlengde=None, kortnavn_brukbar=None, beskrivelse=None, sorteringsnummer=None, objektliste_dato=None, sluttdato=None, standardverdi=None, komplementr_enumverdi=None):  # noqa: E501
        """EnumVerdiBase - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._kortnavn = None
        self._kortnavnlengde = None
        self._kortnavn_brukbar = None
        self._beskrivelse = None
        self._sorteringsnummer = None
        self._objektliste_dato = None
        self._sluttdato = None
        self._standardverdi = None
        self._komplementr_enumverdi = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if kortnavn is not None:
            self.kortnavn = kortnavn
        if kortnavnlengde is not None:
            self.kortnavnlengde = kortnavnlengde
        if kortnavn_brukbar is not None:
            self.kortnavn_brukbar = kortnavn_brukbar
        if beskrivelse is not None:
            self.beskrivelse = beskrivelse
        if sorteringsnummer is not None:
            self.sorteringsnummer = sorteringsnummer
        if objektliste_dato is not None:
            self.objektliste_dato = objektliste_dato
        if sluttdato is not None:
            self.sluttdato = sluttdato
        if standardverdi is not None:
            self.standardverdi = standardverdi
        if komplementr_enumverdi is not None:
            self.komplementr_enumverdi = komplementr_enumverdi

    @property
    def id(self):
        """Gets the id of this EnumVerdiBase.  # noqa: E501


        :return: The id of this EnumVerdiBase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnumVerdiBase.


        :param id: The id of this EnumVerdiBase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kortnavn(self):
        """Gets the kortnavn of this EnumVerdiBase.  # noqa: E501


        :return: The kortnavn of this EnumVerdiBase.  # noqa: E501
        :rtype: str
        """
        return self._kortnavn

    @kortnavn.setter
    def kortnavn(self, kortnavn):
        """Sets the kortnavn of this EnumVerdiBase.


        :param kortnavn: The kortnavn of this EnumVerdiBase.  # noqa: E501
        :type: str
        """

        self._kortnavn = kortnavn

    @property
    def kortnavnlengde(self):
        """Gets the kortnavnlengde of this EnumVerdiBase.  # noqa: E501


        :return: The kortnavnlengde of this EnumVerdiBase.  # noqa: E501
        :rtype: int
        """
        return self._kortnavnlengde

    @kortnavnlengde.setter
    def kortnavnlengde(self, kortnavnlengde):
        """Sets the kortnavnlengde of this EnumVerdiBase.


        :param kortnavnlengde: The kortnavnlengde of this EnumVerdiBase.  # noqa: E501
        :type: int
        """

        self._kortnavnlengde = kortnavnlengde

    @property
    def kortnavn_brukbar(self):
        """Gets the kortnavn_brukbar of this EnumVerdiBase.  # noqa: E501


        :return: The kortnavn_brukbar of this EnumVerdiBase.  # noqa: E501
        :rtype: bool
        """
        return self._kortnavn_brukbar

    @kortnavn_brukbar.setter
    def kortnavn_brukbar(self, kortnavn_brukbar):
        """Sets the kortnavn_brukbar of this EnumVerdiBase.


        :param kortnavn_brukbar: The kortnavn_brukbar of this EnumVerdiBase.  # noqa: E501
        :type: bool
        """

        self._kortnavn_brukbar = kortnavn_brukbar

    @property
    def beskrivelse(self):
        """Gets the beskrivelse of this EnumVerdiBase.  # noqa: E501


        :return: The beskrivelse of this EnumVerdiBase.  # noqa: E501
        :rtype: str
        """
        return self._beskrivelse

    @beskrivelse.setter
    def beskrivelse(self, beskrivelse):
        """Sets the beskrivelse of this EnumVerdiBase.


        :param beskrivelse: The beskrivelse of this EnumVerdiBase.  # noqa: E501
        :type: str
        """

        self._beskrivelse = beskrivelse

    @property
    def sorteringsnummer(self):
        """Gets the sorteringsnummer of this EnumVerdiBase.  # noqa: E501


        :return: The sorteringsnummer of this EnumVerdiBase.  # noqa: E501
        :rtype: int
        """
        return self._sorteringsnummer

    @sorteringsnummer.setter
    def sorteringsnummer(self, sorteringsnummer):
        """Sets the sorteringsnummer of this EnumVerdiBase.


        :param sorteringsnummer: The sorteringsnummer of this EnumVerdiBase.  # noqa: E501
        :type: int
        """

        self._sorteringsnummer = sorteringsnummer

    @property
    def objektliste_dato(self):
        """Gets the objektliste_dato of this EnumVerdiBase.  # noqa: E501


        :return: The objektliste_dato of this EnumVerdiBase.  # noqa: E501
        :rtype: date
        """
        return self._objektliste_dato

    @objektliste_dato.setter
    def objektliste_dato(self, objektliste_dato):
        """Sets the objektliste_dato of this EnumVerdiBase.


        :param objektliste_dato: The objektliste_dato of this EnumVerdiBase.  # noqa: E501
        :type: date
        """

        self._objektliste_dato = objektliste_dato

    @property
    def sluttdato(self):
        """Gets the sluttdato of this EnumVerdiBase.  # noqa: E501


        :return: The sluttdato of this EnumVerdiBase.  # noqa: E501
        :rtype: date
        """
        return self._sluttdato

    @sluttdato.setter
    def sluttdato(self, sluttdato):
        """Sets the sluttdato of this EnumVerdiBase.


        :param sluttdato: The sluttdato of this EnumVerdiBase.  # noqa: E501
        :type: date
        """

        self._sluttdato = sluttdato

    @property
    def standardverdi(self):
        """Gets the standardverdi of this EnumVerdiBase.  # noqa: E501


        :return: The standardverdi of this EnumVerdiBase.  # noqa: E501
        :rtype: bool
        """
        return self._standardverdi

    @standardverdi.setter
    def standardverdi(self, standardverdi):
        """Sets the standardverdi of this EnumVerdiBase.


        :param standardverdi: The standardverdi of this EnumVerdiBase.  # noqa: E501
        :type: bool
        """

        self._standardverdi = standardverdi

    @property
    def komplementr_enumverdi(self):
        """Gets the komplementr_enumverdi of this EnumVerdiBase.  # noqa: E501


        :return: The komplementr_enumverdi of this EnumVerdiBase.  # noqa: E501
        :rtype: int
        """
        return self._komplementr_enumverdi

    @komplementr_enumverdi.setter
    def komplementr_enumverdi(self, komplementr_enumverdi):
        """Sets the komplementr_enumverdi of this EnumVerdiBase.


        :param komplementr_enumverdi: The komplementr_enumverdi of this EnumVerdiBase.  # noqa: E501
        :type: int
        """

        self._komplementr_enumverdi = komplementr_enumverdi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumVerdiBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumVerdiBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
