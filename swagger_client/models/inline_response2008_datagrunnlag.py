# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008Datagrunnlag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datakatalog': 'InlineResponse2008DatagrunnlagDatakatalog',
        'sist_oppdatert': 'str',
        'sist_prosesserte_transaksjon': 'InlineResponse2008DatagrunnlagSistProsesserteTransaksjon'
    }

    attribute_map = {
        'datakatalog': 'datakatalog',
        'sist_oppdatert': 'sist_oppdatert',
        'sist_prosesserte_transaksjon': 'sist_prosesserte_transaksjon'
    }

    def __init__(self, datakatalog=None, sist_oppdatert=None, sist_prosesserte_transaksjon=None):  # noqa: E501
        """InlineResponse2008Datagrunnlag - a model defined in Swagger"""  # noqa: E501
        self._datakatalog = None
        self._sist_oppdatert = None
        self._sist_prosesserte_transaksjon = None
        self.discriminator = None
        if datakatalog is not None:
            self.datakatalog = datakatalog
        if sist_oppdatert is not None:
            self.sist_oppdatert = sist_oppdatert
        if sist_prosesserte_transaksjon is not None:
            self.sist_prosesserte_transaksjon = sist_prosesserte_transaksjon

    @property
    def datakatalog(self):
        """Gets the datakatalog of this InlineResponse2008Datagrunnlag.  # noqa: E501


        :return: The datakatalog of this InlineResponse2008Datagrunnlag.  # noqa: E501
        :rtype: InlineResponse2008DatagrunnlagDatakatalog
        """
        return self._datakatalog

    @datakatalog.setter
    def datakatalog(self, datakatalog):
        """Sets the datakatalog of this InlineResponse2008Datagrunnlag.


        :param datakatalog: The datakatalog of this InlineResponse2008Datagrunnlag.  # noqa: E501
        :type: InlineResponse2008DatagrunnlagDatakatalog
        """

        self._datakatalog = datakatalog

    @property
    def sist_oppdatert(self):
        """Gets the sist_oppdatert of this InlineResponse2008Datagrunnlag.  # noqa: E501


        :return: The sist_oppdatert of this InlineResponse2008Datagrunnlag.  # noqa: E501
        :rtype: str
        """
        return self._sist_oppdatert

    @sist_oppdatert.setter
    def sist_oppdatert(self, sist_oppdatert):
        """Sets the sist_oppdatert of this InlineResponse2008Datagrunnlag.


        :param sist_oppdatert: The sist_oppdatert of this InlineResponse2008Datagrunnlag.  # noqa: E501
        :type: str
        """

        self._sist_oppdatert = sist_oppdatert

    @property
    def sist_prosesserte_transaksjon(self):
        """Gets the sist_prosesserte_transaksjon of this InlineResponse2008Datagrunnlag.  # noqa: E501


        :return: The sist_prosesserte_transaksjon of this InlineResponse2008Datagrunnlag.  # noqa: E501
        :rtype: InlineResponse2008DatagrunnlagSistProsesserteTransaksjon
        """
        return self._sist_prosesserte_transaksjon

    @sist_prosesserte_transaksjon.setter
    def sist_prosesserte_transaksjon(self, sist_prosesserte_transaksjon):
        """Sets the sist_prosesserte_transaksjon of this InlineResponse2008Datagrunnlag.


        :param sist_prosesserte_transaksjon: The sist_prosesserte_transaksjon of this InlineResponse2008Datagrunnlag.  # noqa: E501
        :type: InlineResponse2008DatagrunnlagSistProsesserteTransaksjon
        """

        self._sist_prosesserte_transaksjon = sist_prosesserte_transaksjon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008Datagrunnlag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008Datagrunnlag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
