# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KortRuteDel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'veglenkesekvensid': 'int',
        'startposisjon': 'float',
        'sluttposisjon': 'float'
    }

    attribute_map = {
        'veglenkesekvensid': 'veglenkesekvensid',
        'startposisjon': 'startposisjon',
        'sluttposisjon': 'sluttposisjon'
    }

    def __init__(self, veglenkesekvensid=None, startposisjon=None, sluttposisjon=None):  # noqa: E501
        """KortRuteDel - a model defined in Swagger"""  # noqa: E501
        self._veglenkesekvensid = None
        self._startposisjon = None
        self._sluttposisjon = None
        self.discriminator = None
        if veglenkesekvensid is not None:
            self.veglenkesekvensid = veglenkesekvensid
        if startposisjon is not None:
            self.startposisjon = startposisjon
        if sluttposisjon is not None:
            self.sluttposisjon = sluttposisjon

    @property
    def veglenkesekvensid(self):
        """Gets the veglenkesekvensid of this KortRuteDel.  # noqa: E501


        :return: The veglenkesekvensid of this KortRuteDel.  # noqa: E501
        :rtype: int
        """
        return self._veglenkesekvensid

    @veglenkesekvensid.setter
    def veglenkesekvensid(self, veglenkesekvensid):
        """Sets the veglenkesekvensid of this KortRuteDel.


        :param veglenkesekvensid: The veglenkesekvensid of this KortRuteDel.  # noqa: E501
        :type: int
        """

        self._veglenkesekvensid = veglenkesekvensid

    @property
    def startposisjon(self):
        """Gets the startposisjon of this KortRuteDel.  # noqa: E501


        :return: The startposisjon of this KortRuteDel.  # noqa: E501
        :rtype: float
        """
        return self._startposisjon

    @startposisjon.setter
    def startposisjon(self, startposisjon):
        """Sets the startposisjon of this KortRuteDel.


        :param startposisjon: The startposisjon of this KortRuteDel.  # noqa: E501
        :type: float
        """

        self._startposisjon = startposisjon

    @property
    def sluttposisjon(self):
        """Gets the sluttposisjon of this KortRuteDel.  # noqa: E501


        :return: The sluttposisjon of this KortRuteDel.  # noqa: E501
        :rtype: float
        """
        return self._sluttposisjon

    @sluttposisjon.setter
    def sluttposisjon(self, sluttposisjon):
        """Sets the sluttposisjon of this KortRuteDel.


        :param sluttposisjon: The sluttposisjon of this KortRuteDel.  # noqa: E501
        :type: float
        """

        self._sluttposisjon = sluttposisjon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KortRuteDel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KortRuteDel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
