# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeterReferanse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meter': 'float',
        'fra_meter': 'float',
        'til_meter': 'float'
    }

    attribute_map = {
        'meter': 'meter',
        'fra_meter': 'fra_meter',
        'til_meter': 'til_meter'
    }

    def __init__(self, meter=None, fra_meter=None, til_meter=None):  # noqa: E501
        """MeterReferanse - a model defined in Swagger"""  # noqa: E501
        self._meter = None
        self._fra_meter = None
        self._til_meter = None
        self.discriminator = None
        if meter is not None:
            self.meter = meter
        if fra_meter is not None:
            self.fra_meter = fra_meter
        if til_meter is not None:
            self.til_meter = til_meter

    @property
    def meter(self):
        """Gets the meter of this MeterReferanse.  # noqa: E501

        Meterverdi for punktreferanse  # noqa: E501

        :return: The meter of this MeterReferanse.  # noqa: E501
        :rtype: float
        """
        return self._meter

    @meter.setter
    def meter(self, meter):
        """Sets the meter of this MeterReferanse.

        Meterverdi for punktreferanse  # noqa: E501

        :param meter: The meter of this MeterReferanse.  # noqa: E501
        :type: float
        """

        self._meter = meter

    @property
    def fra_meter(self):
        """Gets the fra_meter of this MeterReferanse.  # noqa: E501

        Start-meterverdi for strekningsreferanse  # noqa: E501

        :return: The fra_meter of this MeterReferanse.  # noqa: E501
        :rtype: float
        """
        return self._fra_meter

    @fra_meter.setter
    def fra_meter(self, fra_meter):
        """Sets the fra_meter of this MeterReferanse.

        Start-meterverdi for strekningsreferanse  # noqa: E501

        :param fra_meter: The fra_meter of this MeterReferanse.  # noqa: E501
        :type: float
        """

        self._fra_meter = fra_meter

    @property
    def til_meter(self):
        """Gets the til_meter of this MeterReferanse.  # noqa: E501

        Slutt-meterverdi for strekningsreferanse  # noqa: E501

        :return: The til_meter of this MeterReferanse.  # noqa: E501
        :rtype: float
        """
        return self._til_meter

    @til_meter.setter
    def til_meter(self, til_meter):
        """Sets the til_meter of this MeterReferanse.

        Slutt-meterverdi for strekningsreferanse  # noqa: E501

        :param til_meter: The til_meter of this MeterReferanse.  # noqa: E501
        :type: float
        """

        self._til_meter = til_meter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeterReferanse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeterReferanse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
