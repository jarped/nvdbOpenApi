# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Posisjonsresultat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vegsystemreferanse': 'Vegsystemreferanse',
        'veglenkesekvens': 'PosisjonsresultatVeglenkesekvens',
        'geometri': 'PosisjonsresultatGeometri',
        'avstand': 'float',
        'kommune': 'int'
    }

    attribute_map = {
        'vegsystemreferanse': 'vegsystemreferanse',
        'veglenkesekvens': 'veglenkesekvens',
        'geometri': 'geometri',
        'avstand': 'avstand',
        'kommune': 'kommune'
    }

    def __init__(self, vegsystemreferanse=None, veglenkesekvens=None, geometri=None, avstand=None, kommune=None):  # noqa: E501
        """Posisjonsresultat - a model defined in Swagger"""  # noqa: E501
        self._vegsystemreferanse = None
        self._veglenkesekvens = None
        self._geometri = None
        self._avstand = None
        self._kommune = None
        self.discriminator = None
        if vegsystemreferanse is not None:
            self.vegsystemreferanse = vegsystemreferanse
        if veglenkesekvens is not None:
            self.veglenkesekvens = veglenkesekvens
        if geometri is not None:
            self.geometri = geometri
        if avstand is not None:
            self.avstand = avstand
        if kommune is not None:
            self.kommune = kommune

    @property
    def vegsystemreferanse(self):
        """Gets the vegsystemreferanse of this Posisjonsresultat.  # noqa: E501


        :return: The vegsystemreferanse of this Posisjonsresultat.  # noqa: E501
        :rtype: Vegsystemreferanse
        """
        return self._vegsystemreferanse

    @vegsystemreferanse.setter
    def vegsystemreferanse(self, vegsystemreferanse):
        """Sets the vegsystemreferanse of this Posisjonsresultat.


        :param vegsystemreferanse: The vegsystemreferanse of this Posisjonsresultat.  # noqa: E501
        :type: Vegsystemreferanse
        """

        self._vegsystemreferanse = vegsystemreferanse

    @property
    def veglenkesekvens(self):
        """Gets the veglenkesekvens of this Posisjonsresultat.  # noqa: E501


        :return: The veglenkesekvens of this Posisjonsresultat.  # noqa: E501
        :rtype: PosisjonsresultatVeglenkesekvens
        """
        return self._veglenkesekvens

    @veglenkesekvens.setter
    def veglenkesekvens(self, veglenkesekvens):
        """Sets the veglenkesekvens of this Posisjonsresultat.


        :param veglenkesekvens: The veglenkesekvens of this Posisjonsresultat.  # noqa: E501
        :type: PosisjonsresultatVeglenkesekvens
        """

        self._veglenkesekvens = veglenkesekvens

    @property
    def geometri(self):
        """Gets the geometri of this Posisjonsresultat.  # noqa: E501


        :return: The geometri of this Posisjonsresultat.  # noqa: E501
        :rtype: PosisjonsresultatGeometri
        """
        return self._geometri

    @geometri.setter
    def geometri(self, geometri):
        """Sets the geometri of this Posisjonsresultat.


        :param geometri: The geometri of this Posisjonsresultat.  # noqa: E501
        :type: PosisjonsresultatGeometri
        """

        self._geometri = geometri

    @property
    def avstand(self):
        """Gets the avstand of this Posisjonsresultat.  # noqa: E501

        Lengde i meter fra posisjonsoppslag  # noqa: E501

        :return: The avstand of this Posisjonsresultat.  # noqa: E501
        :rtype: float
        """
        return self._avstand

    @avstand.setter
    def avstand(self, avstand):
        """Sets the avstand of this Posisjonsresultat.

        Lengde i meter fra posisjonsoppslag  # noqa: E501

        :param avstand: The avstand of this Posisjonsresultat.  # noqa: E501
        :type: float
        """

        self._avstand = avstand

    @property
    def kommune(self):
        """Gets the kommune of this Posisjonsresultat.  # noqa: E501


        :return: The kommune of this Posisjonsresultat.  # noqa: E501
        :rtype: int
        """
        return self._kommune

    @kommune.setter
    def kommune(self, kommune):
        """Sets the kommune of this Posisjonsresultat.


        :param kommune: The kommune of this Posisjonsresultat.  # noqa: E501
        :type: int
        """

        self._kommune = kommune

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Posisjonsresultat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Posisjonsresultat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
