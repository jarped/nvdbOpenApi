# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RouteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'str',
        'slutt': 'str',
        'geometri': 'str',
        'maks_avstand': 'int',
        'omkrets': 'int',
        'konnekteringslenker': 'bool',
        'detaljerte_lenker': 'bool',
        'kortform': 'bool',
        'vegsystemreferanse': 'str',
        'trafikantgruppe': 'str',
        'behold_trafikantgruppe': 'bool',
        'typeveg': 'str',
        'tidspunkt': 'date',
        'tidspunkt_start': 'date',
        'tidspunkt_slutt': 'date'
    }

    attribute_map = {
        'start': 'start',
        'slutt': 'slutt',
        'geometri': 'geometri',
        'maks_avstand': 'maks_avstand',
        'omkrets': 'omkrets',
        'konnekteringslenker': 'konnekteringslenker',
        'detaljerte_lenker': 'detaljerte_lenker',
        'kortform': 'kortform',
        'vegsystemreferanse': 'vegsystemreferanse',
        'trafikantgruppe': 'trafikantgruppe',
        'behold_trafikantgruppe': 'behold_trafikantgruppe',
        'typeveg': 'typeveg',
        'tidspunkt': 'tidspunkt',
        'tidspunkt_start': 'tidspunkt_start',
        'tidspunkt_slutt': 'tidspunkt_slutt'
    }

    def __init__(self, start=None, slutt=None, geometri=None, maks_avstand=10, omkrets=100, konnekteringslenker=False, detaljerte_lenker=False, kortform=False, vegsystemreferanse=None, trafikantgruppe=None, behold_trafikantgruppe=False, typeveg=None, tidspunkt=None, tidspunkt_start=None, tidspunkt_slutt=None):  # noqa: E501
        """RouteRequest - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._slutt = None
        self._geometri = None
        self._maks_avstand = None
        self._omkrets = None
        self._konnekteringslenker = None
        self._detaljerte_lenker = None
        self._kortform = None
        self._vegsystemreferanse = None
        self._trafikantgruppe = None
        self._behold_trafikantgruppe = None
        self._typeveg = None
        self._tidspunkt = None
        self._tidspunkt_start = None
        self._tidspunkt_slutt = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if slutt is not None:
            self.slutt = slutt
        if geometri is not None:
            self.geometri = geometri
        if maks_avstand is not None:
            self.maks_avstand = maks_avstand
        if omkrets is not None:
            self.omkrets = omkrets
        if konnekteringslenker is not None:
            self.konnekteringslenker = konnekteringslenker
        if detaljerte_lenker is not None:
            self.detaljerte_lenker = detaljerte_lenker
        if kortform is not None:
            self.kortform = kortform
        if vegsystemreferanse is not None:
            self.vegsystemreferanse = vegsystemreferanse
        if trafikantgruppe is not None:
            self.trafikantgruppe = trafikantgruppe
        if behold_trafikantgruppe is not None:
            self.behold_trafikantgruppe = behold_trafikantgruppe
        if typeveg is not None:
            self.typeveg = typeveg
        if tidspunkt is not None:
            self.tidspunkt = tidspunkt
        if tidspunkt_start is not None:
            self.tidspunkt_start = tidspunkt_start
        if tidspunkt_slutt is not None:
            self.tidspunkt_slutt = tidspunkt_slutt

    @property
    def start(self):
        """Gets the start of this RouteRequest.  # noqa: E501

        Startposisjon som et punkt eller posisjon@veglenkesekvens.  # noqa: E501

        :return: The start of this RouteRequest.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RouteRequest.

        Startposisjon som et punkt eller posisjon@veglenkesekvens.  # noqa: E501

        :param start: The start of this RouteRequest.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def slutt(self):
        """Gets the slutt of this RouteRequest.  # noqa: E501

        Sluttposisjon som et punkt eller posisjon@veglenkesekvens.  # noqa: E501

        :return: The slutt of this RouteRequest.  # noqa: E501
        :rtype: str
        """
        return self._slutt

    @slutt.setter
    def slutt(self, slutt):
        """Sets the slutt of this RouteRequest.

        Sluttposisjon som et punkt eller posisjon@veglenkesekvens.  # noqa: E501

        :param slutt: The slutt of this RouteRequest.  # noqa: E501
        :type: str
        """

        self._slutt = slutt

    @property
    def geometri(self):
        """Gets the geometri of this RouteRequest.  # noqa: E501

        Finn sammenhengende vegnett som passer med denne geometrien. Benytter punkt-til-punkt-beregning mellom alle punkter i geometrien.  # noqa: E501

        :return: The geometri of this RouteRequest.  # noqa: E501
        :rtype: str
        """
        return self._geometri

    @geometri.setter
    def geometri(self, geometri):
        """Sets the geometri of this RouteRequest.

        Finn sammenhengende vegnett som passer med denne geometrien. Benytter punkt-til-punkt-beregning mellom alle punkter i geometrien.  # noqa: E501

        :param geometri: The geometri of this RouteRequest.  # noqa: E501
        :type: str
        """

        self._geometri = geometri

    @property
    def maks_avstand(self):
        """Gets the maks_avstand of this RouteRequest.  # noqa: E501

        Maks avstand i meter til veglenker  # noqa: E501

        :return: The maks_avstand of this RouteRequest.  # noqa: E501
        :rtype: int
        """
        return self._maks_avstand

    @maks_avstand.setter
    def maks_avstand(self, maks_avstand):
        """Sets the maks_avstand of this RouteRequest.

        Maks avstand i meter til veglenker  # noqa: E501

        :param maks_avstand: The maks_avstand of this RouteRequest.  # noqa: E501
        :type: int
        """

        self._maks_avstand = maks_avstand

    @property
    def omkrets(self):
        """Gets the omkrets of this RouteRequest.  # noqa: E501

        Konvolutt lagt rund start- og slutt-punkt for å beregne rute  # noqa: E501

        :return: The omkrets of this RouteRequest.  # noqa: E501
        :rtype: int
        """
        return self._omkrets

    @omkrets.setter
    def omkrets(self, omkrets):
        """Sets the omkrets of this RouteRequest.

        Konvolutt lagt rund start- og slutt-punkt for å beregne rute  # noqa: E501

        :param omkrets: The omkrets of this RouteRequest.  # noqa: E501
        :type: int
        """

        self._omkrets = omkrets

    @property
    def konnekteringslenker(self):
        """Gets the konnekteringslenker of this RouteRequest.  # noqa: E501

        Inkludere konnekteringslenker  # noqa: E501

        :return: The konnekteringslenker of this RouteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._konnekteringslenker

    @konnekteringslenker.setter
    def konnekteringslenker(self, konnekteringslenker):
        """Sets the konnekteringslenker of this RouteRequest.

        Inkludere konnekteringslenker  # noqa: E501

        :param konnekteringslenker: The konnekteringslenker of this RouteRequest.  # noqa: E501
        :type: bool
        """

        self._konnekteringslenker = konnekteringslenker

    @property
    def detaljerte_lenker(self):
        """Gets the detaljerte_lenker of this RouteRequest.  # noqa: E501

        Inkludere detaljerte lenker  # noqa: E501

        :return: The detaljerte_lenker of this RouteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._detaljerte_lenker

    @detaljerte_lenker.setter
    def detaljerte_lenker(self, detaljerte_lenker):
        """Sets the detaljerte_lenker of this RouteRequest.

        Inkludere detaljerte lenker  # noqa: E501

        :param detaljerte_lenker: The detaljerte_lenker of this RouteRequest.  # noqa: E501
        :type: bool
        """

        self._detaljerte_lenker = detaljerte_lenker

    @property
    def kortform(self):
        """Gets the kortform of this RouteRequest.  # noqa: E501

        Returner minimal respons  # noqa: E501

        :return: The kortform of this RouteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._kortform

    @kortform.setter
    def kortform(self, kortform):
        """Sets the kortform of this RouteRequest.

        Returner minimal respons  # noqa: E501

        :param kortform: The kortform of this RouteRequest.  # noqa: E501
        :type: bool
        """

        self._kortform = kortform

    @property
    def vegsystemreferanse(self):
        """Gets the vegsystemreferanse of this RouteRequest.  # noqa: E501

        Begrens søk innenfor vegreferanse  # noqa: E501

        :return: The vegsystemreferanse of this RouteRequest.  # noqa: E501
        :rtype: str
        """
        return self._vegsystemreferanse

    @vegsystemreferanse.setter
    def vegsystemreferanse(self, vegsystemreferanse):
        """Sets the vegsystemreferanse of this RouteRequest.

        Begrens søk innenfor vegreferanse  # noqa: E501

        :param vegsystemreferanse: The vegsystemreferanse of this RouteRequest.  # noqa: E501
        :type: str
        """

        self._vegsystemreferanse = vegsystemreferanse

    @property
    def trafikantgruppe(self):
        """Gets the trafikantgruppe of this RouteRequest.  # noqa: E501

        Begrens søk innenfor trafikantgruppe. Overstyrer behold_trafikantgruppe  # noqa: E501

        :return: The trafikantgruppe of this RouteRequest.  # noqa: E501
        :rtype: str
        """
        return self._trafikantgruppe

    @trafikantgruppe.setter
    def trafikantgruppe(self, trafikantgruppe):
        """Sets the trafikantgruppe of this RouteRequest.

        Begrens søk innenfor trafikantgruppe. Overstyrer behold_trafikantgruppe  # noqa: E501

        :param trafikantgruppe: The trafikantgruppe of this RouteRequest.  # noqa: E501
        :type: str
        """

        self._trafikantgruppe = trafikantgruppe

    @property
    def behold_trafikantgruppe(self):
        """Gets the behold_trafikantgruppe of this RouteRequest.  # noqa: E501

        Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende)  # noqa: E501

        :return: The behold_trafikantgruppe of this RouteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._behold_trafikantgruppe

    @behold_trafikantgruppe.setter
    def behold_trafikantgruppe(self, behold_trafikantgruppe):
        """Sets the behold_trafikantgruppe of this RouteRequest.

        Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende)  # noqa: E501

        :param behold_trafikantgruppe: The behold_trafikantgruppe of this RouteRequest.  # noqa: E501
        :type: bool
        """

        self._behold_trafikantgruppe = behold_trafikantgruppe

    @property
    def typeveg(self):
        """Gets the typeveg of this RouteRequest.  # noqa: E501

        Begrens søk innenfor typeveg  # noqa: E501

        :return: The typeveg of this RouteRequest.  # noqa: E501
        :rtype: str
        """
        return self._typeveg

    @typeveg.setter
    def typeveg(self, typeveg):
        """Sets the typeveg of this RouteRequest.

        Begrens søk innenfor typeveg  # noqa: E501

        :param typeveg: The typeveg of this RouteRequest.  # noqa: E501
        :type: str
        """

        self._typeveg = typeveg

    @property
    def tidspunkt(self):
        """Gets the tidspunkt of this RouteRequest.  # noqa: E501

        Søk i vegnett åpent på dette tidspunktet  # noqa: E501

        :return: The tidspunkt of this RouteRequest.  # noqa: E501
        :rtype: date
        """
        return self._tidspunkt

    @tidspunkt.setter
    def tidspunkt(self, tidspunkt):
        """Sets the tidspunkt of this RouteRequest.

        Søk i vegnett åpent på dette tidspunktet  # noqa: E501

        :param tidspunkt: The tidspunkt of this RouteRequest.  # noqa: E501
        :type: date
        """

        self._tidspunkt = tidspunkt

    @property
    def tidspunkt_start(self):
        """Gets the tidspunkt_start of this RouteRequest.  # noqa: E501

        Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.  # noqa: E501

        :return: The tidspunkt_start of this RouteRequest.  # noqa: E501
        :rtype: date
        """
        return self._tidspunkt_start

    @tidspunkt_start.setter
    def tidspunkt_start(self, tidspunkt_start):
        """Sets the tidspunkt_start of this RouteRequest.

        Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.  # noqa: E501

        :param tidspunkt_start: The tidspunkt_start of this RouteRequest.  # noqa: E501
        :type: date
        """

        self._tidspunkt_start = tidspunkt_start

    @property
    def tidspunkt_slutt(self):
        """Gets the tidspunkt_slutt of this RouteRequest.  # noqa: E501

        Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.  # noqa: E501

        :return: The tidspunkt_slutt of this RouteRequest.  # noqa: E501
        :rtype: date
        """
        return self._tidspunkt_slutt

    @tidspunkt_slutt.setter
    def tidspunkt_slutt(self, tidspunkt_slutt):
        """Sets the tidspunkt_slutt of this RouteRequest.

        Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.  # noqa: E501

        :param tidspunkt_slutt: The tidspunkt_slutt of this RouteRequest.  # noqa: E501
        :type: date
        """

        self._tidspunkt_slutt = tidspunkt_slutt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
