# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuteresponsMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'antall': 'float',
        'lengde': 'float',
        'status': 'float',
        'status_tekst': 'str'
    }

    attribute_map = {
        'antall': 'antall',
        'lengde': 'lengde',
        'status': 'status',
        'status_tekst': 'status_tekst'
    }

    def __init__(self, antall=None, lengde=None, status=None, status_tekst=None):  # noqa: E501
        """RuteresponsMetadata - a model defined in Swagger"""  # noqa: E501
        self._antall = None
        self._lengde = None
        self._status = None
        self._status_tekst = None
        self.discriminator = None
        if antall is not None:
            self.antall = antall
        if lengde is not None:
            self.lengde = lengde
        if status is not None:
            self.status = status
        if status_tekst is not None:
            self.status_tekst = status_tekst

    @property
    def antall(self):
        """Gets the antall of this RuteresponsMetadata.  # noqa: E501

        Antall rutedeler  # noqa: E501

        :return: The antall of this RuteresponsMetadata.  # noqa: E501
        :rtype: float
        """
        return self._antall

    @antall.setter
    def antall(self, antall):
        """Sets the antall of this RuteresponsMetadata.

        Antall rutedeler  # noqa: E501

        :param antall: The antall of this RuteresponsMetadata.  # noqa: E501
        :type: float
        """

        self._antall = antall

    @property
    def lengde(self):
        """Gets the lengde of this RuteresponsMetadata.  # noqa: E501

        Rutas lengde i meter  # noqa: E501

        :return: The lengde of this RuteresponsMetadata.  # noqa: E501
        :rtype: float
        """
        return self._lengde

    @lengde.setter
    def lengde(self, lengde):
        """Sets the lengde of this RuteresponsMetadata.

        Rutas lengde i meter  # noqa: E501

        :param lengde: The lengde of this RuteresponsMetadata.  # noqa: E501
        :type: float
        """

        self._lengde = lengde

    @property
    def status(self):
        """Gets the status of this RuteresponsMetadata.  # noqa: E501

        Statuskode for returnert rute  # noqa: E501

        :return: The status of this RuteresponsMetadata.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuteresponsMetadata.

        Statuskode for returnert rute  # noqa: E501

        :param status: The status of this RuteresponsMetadata.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def status_tekst(self):
        """Gets the status_tekst of this RuteresponsMetadata.  # noqa: E501

        Statuskode i tekstform for returnert rute  # noqa: E501

        :return: The status_tekst of this RuteresponsMetadata.  # noqa: E501
        :rtype: str
        """
        return self._status_tekst

    @status_tekst.setter
    def status_tekst(self, status_tekst):
        """Sets the status_tekst of this RuteresponsMetadata.

        Statuskode i tekstform for returnert rute  # noqa: E501

        :param status_tekst: The status_tekst of this RuteresponsMetadata.  # noqa: E501
        :type: str
        """

        self._status_tekst = status_tekst

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuteresponsMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuteresponsMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
