# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transaksjon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'int',
        'task_type_id': 'int',
        'tidspunkt': 'str',
        'objekter': 'list[VegobjektMetadata]'
    }

    attribute_map = {
        'task_id': 'taskId',
        'task_type_id': 'taskTypeId',
        'tidspunkt': 'tidspunkt',
        'objekter': 'objekter'
    }

    def __init__(self, task_id=None, task_type_id=None, tidspunkt=None, objekter=None):  # noqa: E501
        """Transaksjon - a model defined in Swagger"""  # noqa: E501
        self._task_id = None
        self._task_type_id = None
        self._tidspunkt = None
        self._objekter = None
        self.discriminator = None
        if task_id is not None:
            self.task_id = task_id
        if task_type_id is not None:
            self.task_type_id = task_type_id
        if tidspunkt is not None:
            self.tidspunkt = tidspunkt
        if objekter is not None:
            self.objekter = objekter

    @property
    def task_id(self):
        """Gets the task_id of this Transaksjon.  # noqa: E501


        :return: The task_id of this Transaksjon.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Transaksjon.


        :param task_id: The task_id of this Transaksjon.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_type_id(self):
        """Gets the task_type_id of this Transaksjon.  # noqa: E501


        :return: The task_type_id of this Transaksjon.  # noqa: E501
        :rtype: int
        """
        return self._task_type_id

    @task_type_id.setter
    def task_type_id(self, task_type_id):
        """Sets the task_type_id of this Transaksjon.


        :param task_type_id: The task_type_id of this Transaksjon.  # noqa: E501
        :type: int
        """

        self._task_type_id = task_type_id

    @property
    def tidspunkt(self):
        """Gets the tidspunkt of this Transaksjon.  # noqa: E501


        :return: The tidspunkt of this Transaksjon.  # noqa: E501
        :rtype: str
        """
        return self._tidspunkt

    @tidspunkt.setter
    def tidspunkt(self, tidspunkt):
        """Sets the tidspunkt of this Transaksjon.


        :param tidspunkt: The tidspunkt of this Transaksjon.  # noqa: E501
        :type: str
        """

        self._tidspunkt = tidspunkt

    @property
    def objekter(self):
        """Gets the objekter of this Transaksjon.  # noqa: E501


        :return: The objekter of this Transaksjon.  # noqa: E501
        :rtype: list[VegobjektMetadata]
        """
        return self._objekter

    @objekter.setter
    def objekter(self, objekter):
        """Sets the objekter of this Transaksjon.


        :param objekter: The objekter of this Transaksjon.  # noqa: E501
        :type: list[VegobjektMetadata]
        """

        self._objekter = objekter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaksjon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaksjon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
