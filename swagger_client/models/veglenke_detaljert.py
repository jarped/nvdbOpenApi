# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.veglenke import Veglenke  # noqa: F401,E501

class VeglenkeDetaljert(Veglenke):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topologiniv': 'Topologiniva',
        'superstedfesting': 'Superstedfesting'
    }
    if hasattr(Veglenke, "swagger_types"):
        swagger_types.update(Veglenke.swagger_types)

    attribute_map = {
        'topologiniv': 'topologinivå',
        'superstedfesting': 'superstedfesting'
    }
    if hasattr(Veglenke, "attribute_map"):
        attribute_map.update(Veglenke.attribute_map)

    def __init__(self, topologiniv=None, superstedfesting=None, *args, **kwargs):  # noqa: E501
        """VeglenkeDetaljert - a model defined in Swagger"""  # noqa: E501
        self._topologiniv = None
        self._superstedfesting = None
        self.discriminator = None
        if topologiniv is not None:
            self.topologiniv = topologiniv
        if superstedfesting is not None:
            self.superstedfesting = superstedfesting
        Veglenke.__init__(self, *args, **kwargs)

    @property
    def topologiniv(self):
        """Gets the topologiniv of this VeglenkeDetaljert.  # noqa: E501


        :return: The topologiniv of this VeglenkeDetaljert.  # noqa: E501
        :rtype: Topologiniva
        """
        return self._topologiniv

    @topologiniv.setter
    def topologiniv(self, topologiniv):
        """Sets the topologiniv of this VeglenkeDetaljert.


        :param topologiniv: The topologiniv of this VeglenkeDetaljert.  # noqa: E501
        :type: Topologiniva
        """

        self._topologiniv = topologiniv

    @property
    def superstedfesting(self):
        """Gets the superstedfesting of this VeglenkeDetaljert.  # noqa: E501


        :return: The superstedfesting of this VeglenkeDetaljert.  # noqa: E501
        :rtype: Superstedfesting
        """
        return self._superstedfesting

    @superstedfesting.setter
    def superstedfesting(self, superstedfesting):
        """Sets the superstedfesting of this VeglenkeDetaljert.


        :param superstedfesting: The superstedfesting of this VeglenkeDetaljert.  # noqa: E501
        :type: Superstedfesting
        """

        self._superstedfesting = superstedfesting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VeglenkeDetaljert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VeglenkeDetaljert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
