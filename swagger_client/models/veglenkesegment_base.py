# coding: utf-8

"""
    NVDB API LES V3

    API for 책 lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VeglenkesegmentBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'metadata': 'VeglenkesegmentbaseMetadata',
        'veglenkesekvensid': 'int',
        'startposisjon': 'float',
        'sluttposisjon': 'float',
        'kortform': 'str',
        'veglenkenummer': 'int',
        'startnode': 'int',
        'sluttnode': 'int',
        'type': 'Veglenketype',
        'topologiniv': 'Topologiniva',
        'detaljniv': 'Detaljniva',
        'type_veg': 'TypeVeg',
        'type_veg_sosi': 'TypeVegSosi',
        'superstedfesting': 'Superstedfesting',
        'feltoversikt': 'list[str]',
        'geometri': 'VeglenkesegmentbaseGeometri',
        'lengde': 'float',
        'fylke': 'int',
        'kommune': 'int',
        'kontraktsomrder': 'list[VeglenkesegmentbaseKontraktsomrder]',
        'riksvegruter': 'list[VeglenkesegmentbaseRiksvegruter]',
        'vegsystemreferanse': 'Vegsystemreferanse'
    }

    attribute_map = {
        'href': 'href',
        'metadata': 'metadata',
        'veglenkesekvensid': 'veglenkesekvensid',
        'startposisjon': 'startposisjon',
        'sluttposisjon': 'sluttposisjon',
        'kortform': 'kortform',
        'veglenkenummer': 'veglenkenummer',
        'startnode': 'startnode',
        'sluttnode': 'sluttnode',
        'type': 'type',
        'topologiniv': 'topologiniv책',
        'detaljniv': 'detaljniv책',
        'type_veg': 'typeVeg',
        'type_veg_sosi': 'typeVeg_sosi',
        'superstedfesting': 'superstedfesting',
        'feltoversikt': 'feltoversikt',
        'geometri': 'geometri',
        'lengde': 'lengde',
        'fylke': 'fylke',
        'kommune': 'kommune',
        'kontraktsomrder': 'kontraktsomr책der',
        'riksvegruter': 'riksvegruter',
        'vegsystemreferanse': 'vegsystemreferanse'
    }

    def __init__(self, href=None, metadata=None, veglenkesekvensid=None, startposisjon=None, sluttposisjon=None, kortform=None, veglenkenummer=None, startnode=None, sluttnode=None, type=None, topologiniv=None, detaljniv=None, type_veg=None, type_veg_sosi=None, superstedfesting=None, feltoversikt=None, geometri=None, lengde=None, fylke=None, kommune=None, kontraktsomrder=None, riksvegruter=None, vegsystemreferanse=None):  # noqa: E501
        """VeglenkesegmentBase - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._metadata = None
        self._veglenkesekvensid = None
        self._startposisjon = None
        self._sluttposisjon = None
        self._kortform = None
        self._veglenkenummer = None
        self._startnode = None
        self._sluttnode = None
        self._type = None
        self._topologiniv = None
        self._detaljniv = None
        self._type_veg = None
        self._type_veg_sosi = None
        self._superstedfesting = None
        self._feltoversikt = None
        self._geometri = None
        self._lengde = None
        self._fylke = None
        self._kommune = None
        self._kontraktsomrder = None
        self._riksvegruter = None
        self._vegsystemreferanse = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if metadata is not None:
            self.metadata = metadata
        if veglenkesekvensid is not None:
            self.veglenkesekvensid = veglenkesekvensid
        if startposisjon is not None:
            self.startposisjon = startposisjon
        if sluttposisjon is not None:
            self.sluttposisjon = sluttposisjon
        if kortform is not None:
            self.kortform = kortform
        if veglenkenummer is not None:
            self.veglenkenummer = veglenkenummer
        if startnode is not None:
            self.startnode = startnode
        if sluttnode is not None:
            self.sluttnode = sluttnode
        if type is not None:
            self.type = type
        if topologiniv is not None:
            self.topologiniv = topologiniv
        if detaljniv is not None:
            self.detaljniv = detaljniv
        if type_veg is not None:
            self.type_veg = type_veg
        if type_veg_sosi is not None:
            self.type_veg_sosi = type_veg_sosi
        if superstedfesting is not None:
            self.superstedfesting = superstedfesting
        if feltoversikt is not None:
            self.feltoversikt = feltoversikt
        if geometri is not None:
            self.geometri = geometri
        if lengde is not None:
            self.lengde = lengde
        if fylke is not None:
            self.fylke = fylke
        if kommune is not None:
            self.kommune = kommune
        if kontraktsomrder is not None:
            self.kontraktsomrder = kontraktsomrder
        if riksvegruter is not None:
            self.riksvegruter = riksvegruter
        if vegsystemreferanse is not None:
            self.vegsystemreferanse = vegsystemreferanse

    @property
    def href(self):
        """Gets the href of this VeglenkesegmentBase.  # noqa: E501


        :return: The href of this VeglenkesegmentBase.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VeglenkesegmentBase.


        :param href: The href of this VeglenkesegmentBase.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def metadata(self):
        """Gets the metadata of this VeglenkesegmentBase.  # noqa: E501


        :return: The metadata of this VeglenkesegmentBase.  # noqa: E501
        :rtype: VeglenkesegmentbaseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VeglenkesegmentBase.


        :param metadata: The metadata of this VeglenkesegmentBase.  # noqa: E501
        :type: VeglenkesegmentbaseMetadata
        """

        self._metadata = metadata

    @property
    def veglenkesekvensid(self):
        """Gets the veglenkesekvensid of this VeglenkesegmentBase.  # noqa: E501


        :return: The veglenkesekvensid of this VeglenkesegmentBase.  # noqa: E501
        :rtype: int
        """
        return self._veglenkesekvensid

    @veglenkesekvensid.setter
    def veglenkesekvensid(self, veglenkesekvensid):
        """Sets the veglenkesekvensid of this VeglenkesegmentBase.


        :param veglenkesekvensid: The veglenkesekvensid of this VeglenkesegmentBase.  # noqa: E501
        :type: int
        """

        self._veglenkesekvensid = veglenkesekvensid

    @property
    def startposisjon(self):
        """Gets the startposisjon of this VeglenkesegmentBase.  # noqa: E501


        :return: The startposisjon of this VeglenkesegmentBase.  # noqa: E501
        :rtype: float
        """
        return self._startposisjon

    @startposisjon.setter
    def startposisjon(self, startposisjon):
        """Sets the startposisjon of this VeglenkesegmentBase.


        :param startposisjon: The startposisjon of this VeglenkesegmentBase.  # noqa: E501
        :type: float
        """

        self._startposisjon = startposisjon

    @property
    def sluttposisjon(self):
        """Gets the sluttposisjon of this VeglenkesegmentBase.  # noqa: E501


        :return: The sluttposisjon of this VeglenkesegmentBase.  # noqa: E501
        :rtype: float
        """
        return self._sluttposisjon

    @sluttposisjon.setter
    def sluttposisjon(self, sluttposisjon):
        """Sets the sluttposisjon of this VeglenkesegmentBase.


        :param sluttposisjon: The sluttposisjon of this VeglenkesegmentBase.  # noqa: E501
        :type: float
        """

        self._sluttposisjon = sluttposisjon

    @property
    def kortform(self):
        """Gets the kortform of this VeglenkesegmentBase.  # noqa: E501


        :return: The kortform of this VeglenkesegmentBase.  # noqa: E501
        :rtype: str
        """
        return self._kortform

    @kortform.setter
    def kortform(self, kortform):
        """Sets the kortform of this VeglenkesegmentBase.


        :param kortform: The kortform of this VeglenkesegmentBase.  # noqa: E501
        :type: str
        """

        self._kortform = kortform

    @property
    def veglenkenummer(self):
        """Gets the veglenkenummer of this VeglenkesegmentBase.  # noqa: E501


        :return: The veglenkenummer of this VeglenkesegmentBase.  # noqa: E501
        :rtype: int
        """
        return self._veglenkenummer

    @veglenkenummer.setter
    def veglenkenummer(self, veglenkenummer):
        """Sets the veglenkenummer of this VeglenkesegmentBase.


        :param veglenkenummer: The veglenkenummer of this VeglenkesegmentBase.  # noqa: E501
        :type: int
        """

        self._veglenkenummer = veglenkenummer

    @property
    def startnode(self):
        """Gets the startnode of this VeglenkesegmentBase.  # noqa: E501


        :return: The startnode of this VeglenkesegmentBase.  # noqa: E501
        :rtype: int
        """
        return self._startnode

    @startnode.setter
    def startnode(self, startnode):
        """Sets the startnode of this VeglenkesegmentBase.


        :param startnode: The startnode of this VeglenkesegmentBase.  # noqa: E501
        :type: int
        """

        self._startnode = startnode

    @property
    def sluttnode(self):
        """Gets the sluttnode of this VeglenkesegmentBase.  # noqa: E501


        :return: The sluttnode of this VeglenkesegmentBase.  # noqa: E501
        :rtype: int
        """
        return self._sluttnode

    @sluttnode.setter
    def sluttnode(self, sluttnode):
        """Sets the sluttnode of this VeglenkesegmentBase.


        :param sluttnode: The sluttnode of this VeglenkesegmentBase.  # noqa: E501
        :type: int
        """

        self._sluttnode = sluttnode

    @property
    def type(self):
        """Gets the type of this VeglenkesegmentBase.  # noqa: E501


        :return: The type of this VeglenkesegmentBase.  # noqa: E501
        :rtype: Veglenketype
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VeglenkesegmentBase.


        :param type: The type of this VeglenkesegmentBase.  # noqa: E501
        :type: Veglenketype
        """

        self._type = type

    @property
    def topologiniv(self):
        """Gets the topologiniv of this VeglenkesegmentBase.  # noqa: E501


        :return: The topologiniv of this VeglenkesegmentBase.  # noqa: E501
        :rtype: Topologiniva
        """
        return self._topologiniv

    @topologiniv.setter
    def topologiniv(self, topologiniv):
        """Sets the topologiniv of this VeglenkesegmentBase.


        :param topologiniv: The topologiniv of this VeglenkesegmentBase.  # noqa: E501
        :type: Topologiniva
        """

        self._topologiniv = topologiniv

    @property
    def detaljniv(self):
        """Gets the detaljniv of this VeglenkesegmentBase.  # noqa: E501


        :return: The detaljniv of this VeglenkesegmentBase.  # noqa: E501
        :rtype: Detaljniva
        """
        return self._detaljniv

    @detaljniv.setter
    def detaljniv(self, detaljniv):
        """Sets the detaljniv of this VeglenkesegmentBase.


        :param detaljniv: The detaljniv of this VeglenkesegmentBase.  # noqa: E501
        :type: Detaljniva
        """

        self._detaljniv = detaljniv

    @property
    def type_veg(self):
        """Gets the type_veg of this VeglenkesegmentBase.  # noqa: E501


        :return: The type_veg of this VeglenkesegmentBase.  # noqa: E501
        :rtype: TypeVeg
        """
        return self._type_veg

    @type_veg.setter
    def type_veg(self, type_veg):
        """Sets the type_veg of this VeglenkesegmentBase.


        :param type_veg: The type_veg of this VeglenkesegmentBase.  # noqa: E501
        :type: TypeVeg
        """

        self._type_veg = type_veg

    @property
    def type_veg_sosi(self):
        """Gets the type_veg_sosi of this VeglenkesegmentBase.  # noqa: E501


        :return: The type_veg_sosi of this VeglenkesegmentBase.  # noqa: E501
        :rtype: TypeVegSosi
        """
        return self._type_veg_sosi

    @type_veg_sosi.setter
    def type_veg_sosi(self, type_veg_sosi):
        """Sets the type_veg_sosi of this VeglenkesegmentBase.


        :param type_veg_sosi: The type_veg_sosi of this VeglenkesegmentBase.  # noqa: E501
        :type: TypeVegSosi
        """

        self._type_veg_sosi = type_veg_sosi

    @property
    def superstedfesting(self):
        """Gets the superstedfesting of this VeglenkesegmentBase.  # noqa: E501


        :return: The superstedfesting of this VeglenkesegmentBase.  # noqa: E501
        :rtype: Superstedfesting
        """
        return self._superstedfesting

    @superstedfesting.setter
    def superstedfesting(self, superstedfesting):
        """Sets the superstedfesting of this VeglenkesegmentBase.


        :param superstedfesting: The superstedfesting of this VeglenkesegmentBase.  # noqa: E501
        :type: Superstedfesting
        """

        self._superstedfesting = superstedfesting

    @property
    def feltoversikt(self):
        """Gets the feltoversikt of this VeglenkesegmentBase.  # noqa: E501


        :return: The feltoversikt of this VeglenkesegmentBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._feltoversikt

    @feltoversikt.setter
    def feltoversikt(self, feltoversikt):
        """Sets the feltoversikt of this VeglenkesegmentBase.


        :param feltoversikt: The feltoversikt of this VeglenkesegmentBase.  # noqa: E501
        :type: list[str]
        """

        self._feltoversikt = feltoversikt

    @property
    def geometri(self):
        """Gets the geometri of this VeglenkesegmentBase.  # noqa: E501


        :return: The geometri of this VeglenkesegmentBase.  # noqa: E501
        :rtype: VeglenkesegmentbaseGeometri
        """
        return self._geometri

    @geometri.setter
    def geometri(self, geometri):
        """Sets the geometri of this VeglenkesegmentBase.


        :param geometri: The geometri of this VeglenkesegmentBase.  # noqa: E501
        :type: VeglenkesegmentbaseGeometri
        """

        self._geometri = geometri

    @property
    def lengde(self):
        """Gets the lengde of this VeglenkesegmentBase.  # noqa: E501


        :return: The lengde of this VeglenkesegmentBase.  # noqa: E501
        :rtype: float
        """
        return self._lengde

    @lengde.setter
    def lengde(self, lengde):
        """Sets the lengde of this VeglenkesegmentBase.


        :param lengde: The lengde of this VeglenkesegmentBase.  # noqa: E501
        :type: float
        """

        self._lengde = lengde

    @property
    def fylke(self):
        """Gets the fylke of this VeglenkesegmentBase.  # noqa: E501


        :return: The fylke of this VeglenkesegmentBase.  # noqa: E501
        :rtype: int
        """
        return self._fylke

    @fylke.setter
    def fylke(self, fylke):
        """Sets the fylke of this VeglenkesegmentBase.


        :param fylke: The fylke of this VeglenkesegmentBase.  # noqa: E501
        :type: int
        """

        self._fylke = fylke

    @property
    def kommune(self):
        """Gets the kommune of this VeglenkesegmentBase.  # noqa: E501


        :return: The kommune of this VeglenkesegmentBase.  # noqa: E501
        :rtype: int
        """
        return self._kommune

    @kommune.setter
    def kommune(self, kommune):
        """Sets the kommune of this VeglenkesegmentBase.


        :param kommune: The kommune of this VeglenkesegmentBase.  # noqa: E501
        :type: int
        """

        self._kommune = kommune

    @property
    def kontraktsomrder(self):
        """Gets the kontraktsomrder of this VeglenkesegmentBase.  # noqa: E501


        :return: The kontraktsomrder of this VeglenkesegmentBase.  # noqa: E501
        :rtype: list[VeglenkesegmentbaseKontraktsomrder]
        """
        return self._kontraktsomrder

    @kontraktsomrder.setter
    def kontraktsomrder(self, kontraktsomrder):
        """Sets the kontraktsomrder of this VeglenkesegmentBase.


        :param kontraktsomrder: The kontraktsomrder of this VeglenkesegmentBase.  # noqa: E501
        :type: list[VeglenkesegmentbaseKontraktsomrder]
        """

        self._kontraktsomrder = kontraktsomrder

    @property
    def riksvegruter(self):
        """Gets the riksvegruter of this VeglenkesegmentBase.  # noqa: E501


        :return: The riksvegruter of this VeglenkesegmentBase.  # noqa: E501
        :rtype: list[VeglenkesegmentbaseRiksvegruter]
        """
        return self._riksvegruter

    @riksvegruter.setter
    def riksvegruter(self, riksvegruter):
        """Sets the riksvegruter of this VeglenkesegmentBase.


        :param riksvegruter: The riksvegruter of this VeglenkesegmentBase.  # noqa: E501
        :type: list[VeglenkesegmentbaseRiksvegruter]
        """

        self._riksvegruter = riksvegruter

    @property
    def vegsystemreferanse(self):
        """Gets the vegsystemreferanse of this VeglenkesegmentBase.  # noqa: E501


        :return: The vegsystemreferanse of this VeglenkesegmentBase.  # noqa: E501
        :rtype: Vegsystemreferanse
        """
        return self._vegsystemreferanse

    @vegsystemreferanse.setter
    def vegsystemreferanse(self, vegsystemreferanse):
        """Sets the vegsystemreferanse of this VeglenkesegmentBase.


        :param vegsystemreferanse: The vegsystemreferanse of this VeglenkesegmentBase.  # noqa: E501
        :type: Vegsystemreferanse
        """

        self._vegsystemreferanse = vegsystemreferanse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VeglenkesegmentBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VeglenkesegmentBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
