# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vegnode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'startdato': 'date',
        'sluttdato': 'date',
        'geometri': 'GeometriBase',
        'porter': 'list[Port]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'startdato': 'startdato',
        'sluttdato': 'sluttdato',
        'geometri': 'geometri',
        'porter': 'porter'
    }

    def __init__(self, id=None, href=None, startdato=None, sluttdato=None, geometri=None, porter=None):  # noqa: E501
        """Vegnode - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._startdato = None
        self._sluttdato = None
        self._geometri = None
        self._porter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if startdato is not None:
            self.startdato = startdato
        if sluttdato is not None:
            self.sluttdato = sluttdato
        if geometri is not None:
            self.geometri = geometri
        if porter is not None:
            self.porter = porter

    @property
    def id(self):
        """Gets the id of this Vegnode.  # noqa: E501


        :return: The id of this Vegnode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vegnode.


        :param id: The id of this Vegnode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Vegnode.  # noqa: E501


        :return: The href of this Vegnode.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Vegnode.


        :param href: The href of this Vegnode.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def startdato(self):
        """Gets the startdato of this Vegnode.  # noqa: E501


        :return: The startdato of this Vegnode.  # noqa: E501
        :rtype: date
        """
        return self._startdato

    @startdato.setter
    def startdato(self, startdato):
        """Sets the startdato of this Vegnode.


        :param startdato: The startdato of this Vegnode.  # noqa: E501
        :type: date
        """

        self._startdato = startdato

    @property
    def sluttdato(self):
        """Gets the sluttdato of this Vegnode.  # noqa: E501


        :return: The sluttdato of this Vegnode.  # noqa: E501
        :rtype: date
        """
        return self._sluttdato

    @sluttdato.setter
    def sluttdato(self, sluttdato):
        """Sets the sluttdato of this Vegnode.


        :param sluttdato: The sluttdato of this Vegnode.  # noqa: E501
        :type: date
        """

        self._sluttdato = sluttdato

    @property
    def geometri(self):
        """Gets the geometri of this Vegnode.  # noqa: E501


        :return: The geometri of this Vegnode.  # noqa: E501
        :rtype: GeometriBase
        """
        return self._geometri

    @geometri.setter
    def geometri(self, geometri):
        """Sets the geometri of this Vegnode.


        :param geometri: The geometri of this Vegnode.  # noqa: E501
        :type: GeometriBase
        """

        self._geometri = geometri

    @property
    def porter(self):
        """Gets the porter of this Vegnode.  # noqa: E501


        :return: The porter of this Vegnode.  # noqa: E501
        :rtype: list[Port]
        """
        return self._porter

    @porter.setter
    def porter(self, porter):
        """Sets the porter of this Vegnode.


        :param porter: The porter of this Vegnode.  # noqa: E501
        :type: list[Port]
        """

        self._porter = porter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vegnode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vegnode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
