# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vegobjekt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'metadata': 'VegobjektMetadata',
        'egenskaper': 'list[VegobjektEgenskap]',
        'geometri': 'VegobjektGeometri',
        'lokasjon': 'VegobjektLokasjon',
        'relasjoner': 'VegobjektRelasjoner',
        'vegsegmenter': 'list[VegobjektVegsegmenter]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'metadata': 'metadata',
        'egenskaper': 'egenskaper',
        'geometri': 'geometri',
        'lokasjon': 'lokasjon',
        'relasjoner': 'relasjoner',
        'vegsegmenter': 'vegsegmenter'
    }

    def __init__(self, id=None, href=None, metadata=None, egenskaper=None, geometri=None, lokasjon=None, relasjoner=None, vegsegmenter=None):  # noqa: E501
        """Vegobjekt - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._metadata = None
        self._egenskaper = None
        self._geometri = None
        self._lokasjon = None
        self._relasjoner = None
        self._vegsegmenter = None
        self.discriminator = None
        self.id = id
        self.href = href
        if metadata is not None:
            self.metadata = metadata
        if egenskaper is not None:
            self.egenskaper = egenskaper
        if geometri is not None:
            self.geometri = geometri
        if lokasjon is not None:
            self.lokasjon = lokasjon
        if relasjoner is not None:
            self.relasjoner = relasjoner
        if vegsegmenter is not None:
            self.vegsegmenter = vegsegmenter

    @property
    def id(self):
        """Gets the id of this Vegobjekt.  # noqa: E501


        :return: The id of this Vegobjekt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vegobjekt.


        :param id: The id of this Vegobjekt.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this Vegobjekt.  # noqa: E501


        :return: The href of this Vegobjekt.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Vegobjekt.


        :param href: The href of this Vegobjekt.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def metadata(self):
        """Gets the metadata of this Vegobjekt.  # noqa: E501


        :return: The metadata of this Vegobjekt.  # noqa: E501
        :rtype: VegobjektMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Vegobjekt.


        :param metadata: The metadata of this Vegobjekt.  # noqa: E501
        :type: VegobjektMetadata
        """

        self._metadata = metadata

    @property
    def egenskaper(self):
        """Gets the egenskaper of this Vegobjekt.  # noqa: E501

        Objektets egenskaper. Tilstede dersom `inkluder=alle|egenskaper`  # noqa: E501

        :return: The egenskaper of this Vegobjekt.  # noqa: E501
        :rtype: list[VegobjektEgenskap]
        """
        return self._egenskaper

    @egenskaper.setter
    def egenskaper(self, egenskaper):
        """Sets the egenskaper of this Vegobjekt.

        Objektets egenskaper. Tilstede dersom `inkluder=alle|egenskaper`  # noqa: E501

        :param egenskaper: The egenskaper of this Vegobjekt.  # noqa: E501
        :type: list[VegobjektEgenskap]
        """

        self._egenskaper = egenskaper

    @property
    def geometri(self):
        """Gets the geometri of this Vegobjekt.  # noqa: E501


        :return: The geometri of this Vegobjekt.  # noqa: E501
        :rtype: VegobjektGeometri
        """
        return self._geometri

    @geometri.setter
    def geometri(self, geometri):
        """Sets the geometri of this Vegobjekt.


        :param geometri: The geometri of this Vegobjekt.  # noqa: E501
        :type: VegobjektGeometri
        """

        self._geometri = geometri

    @property
    def lokasjon(self):
        """Gets the lokasjon of this Vegobjekt.  # noqa: E501


        :return: The lokasjon of this Vegobjekt.  # noqa: E501
        :rtype: VegobjektLokasjon
        """
        return self._lokasjon

    @lokasjon.setter
    def lokasjon(self, lokasjon):
        """Sets the lokasjon of this Vegobjekt.


        :param lokasjon: The lokasjon of this Vegobjekt.  # noqa: E501
        :type: VegobjektLokasjon
        """

        self._lokasjon = lokasjon

    @property
    def relasjoner(self):
        """Gets the relasjoner of this Vegobjekt.  # noqa: E501


        :return: The relasjoner of this Vegobjekt.  # noqa: E501
        :rtype: VegobjektRelasjoner
        """
        return self._relasjoner

    @relasjoner.setter
    def relasjoner(self, relasjoner):
        """Sets the relasjoner of this Vegobjekt.


        :param relasjoner: The relasjoner of this Vegobjekt.  # noqa: E501
        :type: VegobjektRelasjoner
        """

        self._relasjoner = relasjoner

    @property
    def vegsegmenter(self):
        """Gets the vegsegmenter of this Vegobjekt.  # noqa: E501

        Segmenter for dette objektet  # noqa: E501

        :return: The vegsegmenter of this Vegobjekt.  # noqa: E501
        :rtype: list[VegobjektVegsegmenter]
        """
        return self._vegsegmenter

    @vegsegmenter.setter
    def vegsegmenter(self, vegsegmenter):
        """Sets the vegsegmenter of this Vegobjekt.

        Segmenter for dette objektet  # noqa: E501

        :param vegsegmenter: The vegsegmenter of this Vegobjekt.  # noqa: E501
        :type: list[VegobjektVegsegmenter]
        """

        self._vegsegmenter = vegsegmenter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vegobjekt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vegobjekt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
