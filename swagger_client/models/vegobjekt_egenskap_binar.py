# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.vegobjekt_egenskap_base import VegobjektEgenskapBase  # noqa: F401,E501

class VegobjektEgenskapBinar(VegobjektEgenskapBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blob_id': 'int',
        'blob_format': 'str',
        'href': 'str'
    }
    if hasattr(VegobjektEgenskapBase, "swagger_types"):
        swagger_types.update(VegobjektEgenskapBase.swagger_types)

    attribute_map = {
        'blob_id': 'blob_id',
        'blob_format': 'blob_format',
        'href': 'href'
    }
    if hasattr(VegobjektEgenskapBase, "attribute_map"):
        attribute_map.update(VegobjektEgenskapBase.attribute_map)

    def __init__(self, blob_id=None, blob_format=None, href=None, *args, **kwargs):  # noqa: E501
        """VegobjektEgenskapBinar - a model defined in Swagger"""  # noqa: E501
        self._blob_id = None
        self._blob_format = None
        self._href = None
        self.discriminator = None
        if blob_id is not None:
            self.blob_id = blob_id
        if blob_format is not None:
            self.blob_format = blob_format
        if href is not None:
            self.href = href
        VegobjektEgenskapBase.__init__(self, *args, **kwargs)

    @property
    def blob_id(self):
        """Gets the blob_id of this VegobjektEgenskapBinar.  # noqa: E501

        ID for binær blob  # noqa: E501

        :return: The blob_id of this VegobjektEgenskapBinar.  # noqa: E501
        :rtype: int
        """
        return self._blob_id

    @blob_id.setter
    def blob_id(self, blob_id):
        """Sets the blob_id of this VegobjektEgenskapBinar.

        ID for binær blob  # noqa: E501

        :param blob_id: The blob_id of this VegobjektEgenskapBinar.  # noqa: E501
        :type: int
        """

        self._blob_id = blob_id

    @property
    def blob_format(self):
        """Gets the blob_format of this VegobjektEgenskapBinar.  # noqa: E501

        Blobformat  # noqa: E501

        :return: The blob_format of this VegobjektEgenskapBinar.  # noqa: E501
        :rtype: str
        """
        return self._blob_format

    @blob_format.setter
    def blob_format(self, blob_format):
        """Sets the blob_format of this VegobjektEgenskapBinar.

        Blobformat  # noqa: E501

        :param blob_format: The blob_format of this VegobjektEgenskapBinar.  # noqa: E501
        :type: str
        """

        self._blob_format = blob_format

    @property
    def href(self):
        """Gets the href of this VegobjektEgenskapBinar.  # noqa: E501

        Fullstendig url for nedlasting  # noqa: E501

        :return: The href of this VegobjektEgenskapBinar.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VegobjektEgenskapBinar.

        Fullstendig url for nedlasting  # noqa: E501

        :param href: The href of this VegobjektEgenskapBinar.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjektEgenskapBinar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjektEgenskapBinar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
