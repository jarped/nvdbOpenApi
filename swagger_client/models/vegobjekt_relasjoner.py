# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VegobjektRelasjoner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'foreldre': 'list[Relasjon]',
        'barn': 'list[OneOfvegobjektRelasjonerBarnItems]'
    }

    attribute_map = {
        'foreldre': 'foreldre',
        'barn': 'barn'
    }

    def __init__(self, foreldre=None, barn=None):  # noqa: E501
        """VegobjektRelasjoner - a model defined in Swagger"""  # noqa: E501
        self._foreldre = None
        self._barn = None
        self.discriminator = None
        if foreldre is not None:
            self.foreldre = foreldre
        if barn is not None:
            self.barn = barn

    @property
    def foreldre(self):
        """Gets the foreldre of this VegobjektRelasjoner.  # noqa: E501

        Objekter som peker på dette objektet  # noqa: E501

        :return: The foreldre of this VegobjektRelasjoner.  # noqa: E501
        :rtype: list[Relasjon]
        """
        return self._foreldre

    @foreldre.setter
    def foreldre(self, foreldre):
        """Sets the foreldre of this VegobjektRelasjoner.

        Objekter som peker på dette objektet  # noqa: E501

        :param foreldre: The foreldre of this VegobjektRelasjoner.  # noqa: E501
        :type: list[Relasjon]
        """

        self._foreldre = foreldre

    @property
    def barn(self):
        """Gets the barn of this VegobjektRelasjoner.  # noqa: E501

        Objekter dette objektet peker på, assosiasjonsegenskaper dette objektet har.  # noqa: E501

        :return: The barn of this VegobjektRelasjoner.  # noqa: E501
        :rtype: list[OneOfvegobjektRelasjonerBarnItems]
        """
        return self._barn

    @barn.setter
    def barn(self, barn):
        """Sets the barn of this VegobjektRelasjoner.

        Objekter dette objektet peker på, assosiasjonsegenskaper dette objektet har.  # noqa: E501

        :param barn: The barn of this VegobjektRelasjoner.  # noqa: E501
        :type: list[OneOfvegobjektRelasjonerBarnItems]
        """

        self._barn = barn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjektRelasjoner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjektRelasjoner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
