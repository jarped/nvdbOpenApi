# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.vegobjekt_type_egenskap_base import VegobjektTypeEgenskapBase  # noqa: F401,E501

class VegobjektTypeEgenskapAssosiasjon(VegobjektTypeEgenskapBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tilknytning': 'int',
        'vegobjekttypeid': 'int',
        'innenfor_mor': 'bool',
        'startdato': 'str',
        'sluttdato': 'str',
        'assosiasjonskrav': 'int',
        'assosiasjonskravkommentar': 'str'
    }
    if hasattr(VegobjektTypeEgenskapBase, "swagger_types"):
        swagger_types.update(VegobjektTypeEgenskapBase.swagger_types)

    attribute_map = {
        'tilknytning': 'tilknytning',
        'vegobjekttypeid': 'vegobjekttypeid',
        'innenfor_mor': 'innenfor_mor',
        'startdato': 'startdato',
        'sluttdato': 'sluttdato',
        'assosiasjonskrav': 'assosiasjonskrav',
        'assosiasjonskravkommentar': 'assosiasjonskravkommentar'
    }
    if hasattr(VegobjektTypeEgenskapBase, "attribute_map"):
        attribute_map.update(VegobjektTypeEgenskapBase.attribute_map)

    def __init__(self, tilknytning=None, vegobjekttypeid=None, innenfor_mor=None, startdato=None, sluttdato=None, assosiasjonskrav=None, assosiasjonskravkommentar=None, *args, **kwargs):  # noqa: E501
        """VegobjektTypeEgenskapAssosiasjon - a model defined in Swagger"""  # noqa: E501
        self._tilknytning = None
        self._vegobjekttypeid = None
        self._innenfor_mor = None
        self._startdato = None
        self._sluttdato = None
        self._assosiasjonskrav = None
        self._assosiasjonskravkommentar = None
        self.discriminator = None
        if tilknytning is not None:
            self.tilknytning = tilknytning
        if vegobjekttypeid is not None:
            self.vegobjekttypeid = vegobjekttypeid
        if innenfor_mor is not None:
            self.innenfor_mor = innenfor_mor
        if startdato is not None:
            self.startdato = startdato
        if sluttdato is not None:
            self.sluttdato = sluttdato
        if assosiasjonskrav is not None:
            self.assosiasjonskrav = assosiasjonskrav
        if assosiasjonskravkommentar is not None:
            self.assosiasjonskravkommentar = assosiasjonskravkommentar
        VegobjektTypeEgenskapBase.__init__(self, *args, **kwargs)

    @property
    def tilknytning(self):
        """Gets the tilknytning of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The tilknytning of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: int
        """
        return self._tilknytning

    @tilknytning.setter
    def tilknytning(self, tilknytning):
        """Sets the tilknytning of this VegobjektTypeEgenskapAssosiasjon.


        :param tilknytning: The tilknytning of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: int
        """

        self._tilknytning = tilknytning

    @property
    def vegobjekttypeid(self):
        """Gets the vegobjekttypeid of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The vegobjekttypeid of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: int
        """
        return self._vegobjekttypeid

    @vegobjekttypeid.setter
    def vegobjekttypeid(self, vegobjekttypeid):
        """Sets the vegobjekttypeid of this VegobjektTypeEgenskapAssosiasjon.


        :param vegobjekttypeid: The vegobjekttypeid of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: int
        """

        self._vegobjekttypeid = vegobjekttypeid

    @property
    def innenfor_mor(self):
        """Gets the innenfor_mor of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The innenfor_mor of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: bool
        """
        return self._innenfor_mor

    @innenfor_mor.setter
    def innenfor_mor(self, innenfor_mor):
        """Sets the innenfor_mor of this VegobjektTypeEgenskapAssosiasjon.


        :param innenfor_mor: The innenfor_mor of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: bool
        """

        self._innenfor_mor = innenfor_mor

    @property
    def startdato(self):
        """Gets the startdato of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The startdato of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: str
        """
        return self._startdato

    @startdato.setter
    def startdato(self, startdato):
        """Sets the startdato of this VegobjektTypeEgenskapAssosiasjon.


        :param startdato: The startdato of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: str
        """

        self._startdato = startdato

    @property
    def sluttdato(self):
        """Gets the sluttdato of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The sluttdato of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: str
        """
        return self._sluttdato

    @sluttdato.setter
    def sluttdato(self, sluttdato):
        """Sets the sluttdato of this VegobjektTypeEgenskapAssosiasjon.


        :param sluttdato: The sluttdato of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: str
        """

        self._sluttdato = sluttdato

    @property
    def assosiasjonskrav(self):
        """Gets the assosiasjonskrav of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The assosiasjonskrav of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: int
        """
        return self._assosiasjonskrav

    @assosiasjonskrav.setter
    def assosiasjonskrav(self, assosiasjonskrav):
        """Sets the assosiasjonskrav of this VegobjektTypeEgenskapAssosiasjon.


        :param assosiasjonskrav: The assosiasjonskrav of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: int
        """

        self._assosiasjonskrav = assosiasjonskrav

    @property
    def assosiasjonskravkommentar(self):
        """Gets the assosiasjonskravkommentar of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501


        :return: The assosiasjonskravkommentar of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :rtype: str
        """
        return self._assosiasjonskravkommentar

    @assosiasjonskravkommentar.setter
    def assosiasjonskravkommentar(self, assosiasjonskravkommentar):
        """Sets the assosiasjonskravkommentar of this VegobjektTypeEgenskapAssosiasjon.


        :param assosiasjonskravkommentar: The assosiasjonskravkommentar of this VegobjektTypeEgenskapAssosiasjon.  # noqa: E501
        :type: str
        """

        self._assosiasjonskravkommentar = assosiasjonskravkommentar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjektTypeEgenskapAssosiasjon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjektTypeEgenskapAssosiasjon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
