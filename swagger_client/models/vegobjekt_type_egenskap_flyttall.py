# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.vegobjekt_type_egenskap_primitiv import VegobjektTypeEgenskapPrimitiv  # noqa: F401,E501

class VegobjektTypeEgenskapFlyttall(VegobjektTypeEgenskapPrimitiv):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standardverdi': 'float',
        'min_anbefalt': 'float',
        'maks_anbefalt': 'float',
        'min': 'float',
        'maks': 'float',
        'desimaler': 'int',
        'feltlengde': 'int',
        'fortegnsendring_snu': 'bool',
        'enhet': 'Enhet'
    }
    if hasattr(VegobjektTypeEgenskapPrimitiv, "swagger_types"):
        swagger_types.update(VegobjektTypeEgenskapPrimitiv.swagger_types)

    attribute_map = {
        'standardverdi': 'standardverdi',
        'min_anbefalt': 'min_anbefalt',
        'maks_anbefalt': 'maks_anbefalt',
        'min': 'min',
        'maks': 'maks',
        'desimaler': 'desimaler',
        'feltlengde': 'feltlengde',
        'fortegnsendring_snu': 'fortegnsendring_snu',
        'enhet': 'enhet'
    }
    if hasattr(VegobjektTypeEgenskapPrimitiv, "attribute_map"):
        attribute_map.update(VegobjektTypeEgenskapPrimitiv.attribute_map)

    def __init__(self, standardverdi=None, min_anbefalt=None, maks_anbefalt=None, min=None, maks=None, desimaler=None, feltlengde=None, fortegnsendring_snu=None, enhet=None, *args, **kwargs):  # noqa: E501
        """VegobjektTypeEgenskapFlyttall - a model defined in Swagger"""  # noqa: E501
        self._standardverdi = None
        self._min_anbefalt = None
        self._maks_anbefalt = None
        self._min = None
        self._maks = None
        self._desimaler = None
        self._feltlengde = None
        self._fortegnsendring_snu = None
        self._enhet = None
        self.discriminator = None
        if standardverdi is not None:
            self.standardverdi = standardverdi
        if min_anbefalt is not None:
            self.min_anbefalt = min_anbefalt
        if maks_anbefalt is not None:
            self.maks_anbefalt = maks_anbefalt
        if min is not None:
            self.min = min
        if maks is not None:
            self.maks = maks
        if desimaler is not None:
            self.desimaler = desimaler
        if feltlengde is not None:
            self.feltlengde = feltlengde
        if fortegnsendring_snu is not None:
            self.fortegnsendring_snu = fortegnsendring_snu
        if enhet is not None:
            self.enhet = enhet
        VegobjektTypeEgenskapPrimitiv.__init__(self, *args, **kwargs)

    @property
    def standardverdi(self):
        """Gets the standardverdi of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The standardverdi of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: float
        """
        return self._standardverdi

    @standardverdi.setter
    def standardverdi(self, standardverdi):
        """Sets the standardverdi of this VegobjektTypeEgenskapFlyttall.


        :param standardverdi: The standardverdi of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: float
        """

        self._standardverdi = standardverdi

    @property
    def min_anbefalt(self):
        """Gets the min_anbefalt of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The min_anbefalt of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: float
        """
        return self._min_anbefalt

    @min_anbefalt.setter
    def min_anbefalt(self, min_anbefalt):
        """Sets the min_anbefalt of this VegobjektTypeEgenskapFlyttall.


        :param min_anbefalt: The min_anbefalt of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: float
        """

        self._min_anbefalt = min_anbefalt

    @property
    def maks_anbefalt(self):
        """Gets the maks_anbefalt of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The maks_anbefalt of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: float
        """
        return self._maks_anbefalt

    @maks_anbefalt.setter
    def maks_anbefalt(self, maks_anbefalt):
        """Sets the maks_anbefalt of this VegobjektTypeEgenskapFlyttall.


        :param maks_anbefalt: The maks_anbefalt of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: float
        """

        self._maks_anbefalt = maks_anbefalt

    @property
    def min(self):
        """Gets the min of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The min of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this VegobjektTypeEgenskapFlyttall.


        :param min: The min of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def maks(self):
        """Gets the maks of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The maks of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: float
        """
        return self._maks

    @maks.setter
    def maks(self, maks):
        """Sets the maks of this VegobjektTypeEgenskapFlyttall.


        :param maks: The maks of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: float
        """

        self._maks = maks

    @property
    def desimaler(self):
        """Gets the desimaler of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The desimaler of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: int
        """
        return self._desimaler

    @desimaler.setter
    def desimaler(self, desimaler):
        """Sets the desimaler of this VegobjektTypeEgenskapFlyttall.


        :param desimaler: The desimaler of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: int
        """

        self._desimaler = desimaler

    @property
    def feltlengde(self):
        """Gets the feltlengde of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The feltlengde of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: int
        """
        return self._feltlengde

    @feltlengde.setter
    def feltlengde(self, feltlengde):
        """Sets the feltlengde of this VegobjektTypeEgenskapFlyttall.


        :param feltlengde: The feltlengde of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: int
        """

        self._feltlengde = feltlengde

    @property
    def fortegnsendring_snu(self):
        """Gets the fortegnsendring_snu of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The fortegnsendring_snu of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: bool
        """
        return self._fortegnsendring_snu

    @fortegnsendring_snu.setter
    def fortegnsendring_snu(self, fortegnsendring_snu):
        """Sets the fortegnsendring_snu of this VegobjektTypeEgenskapFlyttall.


        :param fortegnsendring_snu: The fortegnsendring_snu of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: bool
        """

        self._fortegnsendring_snu = fortegnsendring_snu

    @property
    def enhet(self):
        """Gets the enhet of this VegobjektTypeEgenskapFlyttall.  # noqa: E501


        :return: The enhet of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :rtype: Enhet
        """
        return self._enhet

    @enhet.setter
    def enhet(self, enhet):
        """Sets the enhet of this VegobjektTypeEgenskapFlyttall.


        :param enhet: The enhet of this VegobjektTypeEgenskapFlyttall.  # noqa: E501
        :type: Enhet
        """

        self._enhet = enhet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjektTypeEgenskapFlyttall, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjektTypeEgenskapFlyttall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
