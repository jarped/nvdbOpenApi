# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.vegobjekt_type_egenskap_base import VegobjektTypeEgenskapBase  # noqa: F401,E501

class VegobjektTypeEgenskapPrimitiv(VegobjektTypeEgenskapBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objektliste_dato': 'str',
        'slutt_dato': 'str',
        'lengdeavhengig_verdi': 'bool',
        'ajourhold_snu': 'bool'
    }
    if hasattr(VegobjektTypeEgenskapBase, "swagger_types"):
        swagger_types.update(VegobjektTypeEgenskapBase.swagger_types)

    attribute_map = {
        'objektliste_dato': 'objektliste_dato',
        'slutt_dato': 'slutt_dato',
        'lengdeavhengig_verdi': 'lengdeavhengig_verdi',
        'ajourhold_snu': 'ajourhold_snu'
    }
    if hasattr(VegobjektTypeEgenskapBase, "attribute_map"):
        attribute_map.update(VegobjektTypeEgenskapBase.attribute_map)

    def __init__(self, objektliste_dato=None, slutt_dato=None, lengdeavhengig_verdi=None, ajourhold_snu=None, *args, **kwargs):  # noqa: E501
        """VegobjektTypeEgenskapPrimitiv - a model defined in Swagger"""  # noqa: E501
        self._objektliste_dato = None
        self._slutt_dato = None
        self._lengdeavhengig_verdi = None
        self._ajourhold_snu = None
        self.discriminator = None
        if objektliste_dato is not None:
            self.objektliste_dato = objektliste_dato
        if slutt_dato is not None:
            self.slutt_dato = slutt_dato
        if lengdeavhengig_verdi is not None:
            self.lengdeavhengig_verdi = lengdeavhengig_verdi
        if ajourhold_snu is not None:
            self.ajourhold_snu = ajourhold_snu
        VegobjektTypeEgenskapBase.__init__(self, *args, **kwargs)

    @property
    def objektliste_dato(self):
        """Gets the objektliste_dato of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501

        Dato for når egenskapstypen ble en del av objektlista. Om feltet ikke har noen verdi, er ikke egenskapstypen en del av objektlista.  # noqa: E501

        :return: The objektliste_dato of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :rtype: str
        """
        return self._objektliste_dato

    @objektliste_dato.setter
    def objektliste_dato(self, objektliste_dato):
        """Sets the objektliste_dato of this VegobjektTypeEgenskapPrimitiv.

        Dato for når egenskapstypen ble en del av objektlista. Om feltet ikke har noen verdi, er ikke egenskapstypen en del av objektlista.  # noqa: E501

        :param objektliste_dato: The objektliste_dato of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :type: str
        """

        self._objektliste_dato = objektliste_dato

    @property
    def slutt_dato(self):
        """Gets the slutt_dato of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501


        :return: The slutt_dato of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :rtype: str
        """
        return self._slutt_dato

    @slutt_dato.setter
    def slutt_dato(self, slutt_dato):
        """Sets the slutt_dato of this VegobjektTypeEgenskapPrimitiv.


        :param slutt_dato: The slutt_dato of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :type: str
        """

        self._slutt_dato = slutt_dato

    @property
    def lengdeavhengig_verdi(self):
        """Gets the lengdeavhengig_verdi of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501


        :return: The lengdeavhengig_verdi of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :rtype: bool
        """
        return self._lengdeavhengig_verdi

    @lengdeavhengig_verdi.setter
    def lengdeavhengig_verdi(self, lengdeavhengig_verdi):
        """Sets the lengdeavhengig_verdi of this VegobjektTypeEgenskapPrimitiv.


        :param lengdeavhengig_verdi: The lengdeavhengig_verdi of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :type: bool
        """

        self._lengdeavhengig_verdi = lengdeavhengig_verdi

    @property
    def ajourhold_snu(self):
        """Gets the ajourhold_snu of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501


        :return: The ajourhold_snu of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :rtype: bool
        """
        return self._ajourhold_snu

    @ajourhold_snu.setter
    def ajourhold_snu(self, ajourhold_snu):
        """Sets the ajourhold_snu of this VegobjektTypeEgenskapPrimitiv.


        :param ajourhold_snu: The ajourhold_snu of this VegobjektTypeEgenskapPrimitiv.  # noqa: E501
        :type: bool
        """

        self._ajourhold_snu = ajourhold_snu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjektTypeEgenskapPrimitiv, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjektTypeEgenskapPrimitiv):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
