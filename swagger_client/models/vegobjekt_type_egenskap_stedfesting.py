# coding: utf-8

"""
    NVDB API LES V3

    API for å lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.vegobjekt_type_egenskap_base import VegobjektTypeEgenskapBase  # noqa: F401,E501

class VegobjektTypeEgenskapStedfesting(VegobjektTypeEgenskapBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stedfestingstype': 'str',
        'geometritype': 'str',
        'overlapp_ok': 'bool',
        'kjrefelt_relevant': 'str',
        'sideposisjon_relevant': 'str',
        'innenfor_mor': 'bool',
        'vegnettsajourhold_splitt': 'str',
        'overlappsautomatikk': 'str',
        'retning_relevant': 'bool'
    }
    if hasattr(VegobjektTypeEgenskapBase, "swagger_types"):
        swagger_types.update(VegobjektTypeEgenskapBase.swagger_types)

    attribute_map = {
        'stedfestingstype': 'stedfestingstype',
        'geometritype': 'geometritype',
        'overlapp_ok': 'overlapp_ok',
        'kjrefelt_relevant': 'kjørefelt_relevant',
        'sideposisjon_relevant': 'sideposisjon_relevant',
        'innenfor_mor': 'innenfor_mor',
        'vegnettsajourhold_splitt': 'vegnettsajourhold_splitt',
        'overlappsautomatikk': 'overlappsautomatikk',
        'retning_relevant': 'retning_relevant'
    }
    if hasattr(VegobjektTypeEgenskapBase, "attribute_map"):
        attribute_map.update(VegobjektTypeEgenskapBase.attribute_map)

    def __init__(self, stedfestingstype=None, geometritype=None, overlapp_ok=None, kjrefelt_relevant=None, sideposisjon_relevant=None, innenfor_mor=None, vegnettsajourhold_splitt=None, overlappsautomatikk=None, retning_relevant=None, *args, **kwargs):  # noqa: E501
        """VegobjektTypeEgenskapStedfesting - a model defined in Swagger"""  # noqa: E501
        self._stedfestingstype = None
        self._geometritype = None
        self._overlapp_ok = None
        self._kjrefelt_relevant = None
        self._sideposisjon_relevant = None
        self._innenfor_mor = None
        self._vegnettsajourhold_splitt = None
        self._overlappsautomatikk = None
        self._retning_relevant = None
        self.discriminator = None
        if stedfestingstype is not None:
            self.stedfestingstype = stedfestingstype
        if geometritype is not None:
            self.geometritype = geometritype
        if overlapp_ok is not None:
            self.overlapp_ok = overlapp_ok
        if kjrefelt_relevant is not None:
            self.kjrefelt_relevant = kjrefelt_relevant
        if sideposisjon_relevant is not None:
            self.sideposisjon_relevant = sideposisjon_relevant
        if innenfor_mor is not None:
            self.innenfor_mor = innenfor_mor
        if vegnettsajourhold_splitt is not None:
            self.vegnettsajourhold_splitt = vegnettsajourhold_splitt
        if overlappsautomatikk is not None:
            self.overlappsautomatikk = overlappsautomatikk
        if retning_relevant is not None:
            self.retning_relevant = retning_relevant
        VegobjektTypeEgenskapBase.__init__(self, *args, **kwargs)

    @property
    def stedfestingstype(self):
        """Gets the stedfestingstype of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The stedfestingstype of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: str
        """
        return self._stedfestingstype

    @stedfestingstype.setter
    def stedfestingstype(self, stedfestingstype):
        """Sets the stedfestingstype of this VegobjektTypeEgenskapStedfesting.


        :param stedfestingstype: The stedfestingstype of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: str
        """
        allowed_values = ["Punkt", "Linje", "Sving"]  # noqa: E501
        if stedfestingstype not in allowed_values:
            raise ValueError(
                "Invalid value for `stedfestingstype` ({0}), must be one of {1}"  # noqa: E501
                .format(stedfestingstype, allowed_values)
            )

        self._stedfestingstype = stedfestingstype

    @property
    def geometritype(self):
        """Gets the geometritype of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The geometritype of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: str
        """
        return self._geometritype

    @geometritype.setter
    def geometritype(self, geometritype):
        """Sets the geometritype of this VegobjektTypeEgenskapStedfesting.


        :param geometritype: The geometritype of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: str
        """
        allowed_values = ["Punkt", "Linje", "Sving"]  # noqa: E501
        if geometritype not in allowed_values:
            raise ValueError(
                "Invalid value for `geometritype` ({0}), must be one of {1}"  # noqa: E501
                .format(geometritype, allowed_values)
            )

        self._geometritype = geometritype

    @property
    def overlapp_ok(self):
        """Gets the overlapp_ok of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The overlapp_ok of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: bool
        """
        return self._overlapp_ok

    @overlapp_ok.setter
    def overlapp_ok(self, overlapp_ok):
        """Sets the overlapp_ok of this VegobjektTypeEgenskapStedfesting.


        :param overlapp_ok: The overlapp_ok of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: bool
        """

        self._overlapp_ok = overlapp_ok

    @property
    def kjrefelt_relevant(self):
        """Gets the kjrefelt_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The kjrefelt_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: str
        """
        return self._kjrefelt_relevant

    @kjrefelt_relevant.setter
    def kjrefelt_relevant(self, kjrefelt_relevant):
        """Sets the kjrefelt_relevant of this VegobjektTypeEgenskapStedfesting.


        :param kjrefelt_relevant: The kjrefelt_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: str
        """
        allowed_values = ["KAN", "NEI", "MÅ"]  # noqa: E501
        if kjrefelt_relevant not in allowed_values:
            raise ValueError(
                "Invalid value for `kjrefelt_relevant` ({0}), must be one of {1}"  # noqa: E501
                .format(kjrefelt_relevant, allowed_values)
            )

        self._kjrefelt_relevant = kjrefelt_relevant

    @property
    def sideposisjon_relevant(self):
        """Gets the sideposisjon_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The sideposisjon_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: str
        """
        return self._sideposisjon_relevant

    @sideposisjon_relevant.setter
    def sideposisjon_relevant(self, sideposisjon_relevant):
        """Sets the sideposisjon_relevant of this VegobjektTypeEgenskapStedfesting.


        :param sideposisjon_relevant: The sideposisjon_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: str
        """
        allowed_values = ["KAN", "NEI", "MÅ"]  # noqa: E501
        if sideposisjon_relevant not in allowed_values:
            raise ValueError(
                "Invalid value for `sideposisjon_relevant` ({0}), must be one of {1}"  # noqa: E501
                .format(sideposisjon_relevant, allowed_values)
            )

        self._sideposisjon_relevant = sideposisjon_relevant

    @property
    def innenfor_mor(self):
        """Gets the innenfor_mor of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The innenfor_mor of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: bool
        """
        return self._innenfor_mor

    @innenfor_mor.setter
    def innenfor_mor(self, innenfor_mor):
        """Sets the innenfor_mor of this VegobjektTypeEgenskapStedfesting.


        :param innenfor_mor: The innenfor_mor of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: bool
        """

        self._innenfor_mor = innenfor_mor

    @property
    def vegnettsajourhold_splitt(self):
        """Gets the vegnettsajourhold_splitt of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The vegnettsajourhold_splitt of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: str
        """
        return self._vegnettsajourhold_splitt

    @vegnettsajourhold_splitt.setter
    def vegnettsajourhold_splitt(self, vegnettsajourhold_splitt):
        """Sets the vegnettsajourhold_splitt of this VegobjektTypeEgenskapStedfesting.


        :param vegnettsajourhold_splitt: The vegnettsajourhold_splitt of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: str
        """
        allowed_values = ["IKKE_TATT_STILLING", "KAN_IKKE_SPLITTES", "KAN_SPLITTES"]  # noqa: E501
        if vegnettsajourhold_splitt not in allowed_values:
            raise ValueError(
                "Invalid value for `vegnettsajourhold_splitt` ({0}), must be one of {1}"  # noqa: E501
                .format(vegnettsajourhold_splitt, allowed_values)
            )

        self._vegnettsajourhold_splitt = vegnettsajourhold_splitt

    @property
    def overlappsautomatikk(self):
        """Gets the overlappsautomatikk of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The overlappsautomatikk of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: str
        """
        return self._overlappsautomatikk

    @overlappsautomatikk.setter
    def overlappsautomatikk(self, overlappsautomatikk):
        """Sets the overlappsautomatikk of this VegobjektTypeEgenskapStedfesting.


        :param overlappsautomatikk: The overlappsautomatikk of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: str
        """

        self._overlappsautomatikk = overlappsautomatikk

    @property
    def retning_relevant(self):
        """Gets the retning_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501


        :return: The retning_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :rtype: bool
        """
        return self._retning_relevant

    @retning_relevant.setter
    def retning_relevant(self, retning_relevant):
        """Sets the retning_relevant of this VegobjektTypeEgenskapStedfesting.


        :param retning_relevant: The retning_relevant of this VegobjektTypeEgenskapStedfesting.  # noqa: E501
        :type: bool
        """

        self._retning_relevant = retning_relevant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjektTypeEgenskapStedfesting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjektTypeEgenskapStedfesting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
