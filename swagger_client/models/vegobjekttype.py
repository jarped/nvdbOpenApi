# coding: utf-8

"""
    NVDB API LES V3

    API for 책 lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vegobjekttype(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'navn': 'str',
        'beskrivelse': 'str',
        'stedfesting': 'Object',
        'objektliste_dato': 'date',
        'veiledning': 'str',
        'sosinvdbnavn': 'str',
        'sosinavn': 'str',
        'sorteringsnummer': 'int',
        'kategorier': 'list[VegobjekttypeKategorier]',
        'egenskaper': 'list[VegobjekttypeEgenskap]',
        'relasjonstyper': 'list[VegobjekttypeRelasjonstyper]',
        'status': 'str',
        'hovedkategori': 'str',
        'dekningsgrad': 'bool',
        'tidsrom_relevant': 'bool',
        'konnekteringslenke_ok': 'bool',
        'abstrakt_type': 'bool',
        'm_ha_mor': 'bool',
        'er_dataserie': 'bool',
        'en_versjon': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'navn': 'navn',
        'beskrivelse': 'beskrivelse',
        'stedfesting': 'stedfesting',
        'objektliste_dato': 'objektliste_dato',
        'veiledning': 'veiledning',
        'sosinvdbnavn': 'sosinvdbnavn',
        'sosinavn': 'sosinavn',
        'sorteringsnummer': 'sorteringsnummer',
        'kategorier': 'kategorier',
        'egenskaper': 'egenskaper',
        'relasjonstyper': 'relasjonstyper',
        'status': 'status',
        'hovedkategori': 'hovedkategori',
        'dekningsgrad': 'dekningsgrad',
        'tidsrom_relevant': 'tidsrom_relevant',
        'konnekteringslenke_ok': 'konnekteringslenkeOk',
        'abstrakt_type': 'abstrakt_type',
        'm_ha_mor': 'm책_ha_mor',
        'er_dataserie': 'er_dataserie',
        'en_versjon': 'en_versjon'
    }

    def __init__(self, id=None, navn=None, beskrivelse=None, stedfesting=None, objektliste_dato=None, veiledning=None, sosinvdbnavn=None, sosinavn=None, sorteringsnummer=None, kategorier=None, egenskaper=None, relasjonstyper=None, status=None, hovedkategori=None, dekningsgrad=None, tidsrom_relevant=None, konnekteringslenke_ok=None, abstrakt_type=None, m_ha_mor=None, er_dataserie=None, en_versjon=None):  # noqa: E501
        """Vegobjekttype - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._navn = None
        self._beskrivelse = None
        self._stedfesting = None
        self._objektliste_dato = None
        self._veiledning = None
        self._sosinvdbnavn = None
        self._sosinavn = None
        self._sorteringsnummer = None
        self._kategorier = None
        self._egenskaper = None
        self._relasjonstyper = None
        self._status = None
        self._hovedkategori = None
        self._dekningsgrad = None
        self._tidsrom_relevant = None
        self._konnekteringslenke_ok = None
        self._abstrakt_type = None
        self._m_ha_mor = None
        self._er_dataserie = None
        self._en_versjon = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if navn is not None:
            self.navn = navn
        if beskrivelse is not None:
            self.beskrivelse = beskrivelse
        if stedfesting is not None:
            self.stedfesting = stedfesting
        if objektliste_dato is not None:
            self.objektliste_dato = objektliste_dato
        if veiledning is not None:
            self.veiledning = veiledning
        if sosinvdbnavn is not None:
            self.sosinvdbnavn = sosinvdbnavn
        if sosinavn is not None:
            self.sosinavn = sosinavn
        if sorteringsnummer is not None:
            self.sorteringsnummer = sorteringsnummer
        if kategorier is not None:
            self.kategorier = kategorier
        if egenskaper is not None:
            self.egenskaper = egenskaper
        if relasjonstyper is not None:
            self.relasjonstyper = relasjonstyper
        if status is not None:
            self.status = status
        if hovedkategori is not None:
            self.hovedkategori = hovedkategori
        if dekningsgrad is not None:
            self.dekningsgrad = dekningsgrad
        if tidsrom_relevant is not None:
            self.tidsrom_relevant = tidsrom_relevant
        if konnekteringslenke_ok is not None:
            self.konnekteringslenke_ok = konnekteringslenke_ok
        if abstrakt_type is not None:
            self.abstrakt_type = abstrakt_type
        if m_ha_mor is not None:
            self.m_ha_mor = m_ha_mor
        if er_dataserie is not None:
            self.er_dataserie = er_dataserie
        if en_versjon is not None:
            self.en_versjon = en_versjon

    @property
    def id(self):
        """Gets the id of this Vegobjekttype.  # noqa: E501


        :return: The id of this Vegobjekttype.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vegobjekttype.


        :param id: The id of this Vegobjekttype.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def navn(self):
        """Gets the navn of this Vegobjekttype.  # noqa: E501


        :return: The navn of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._navn

    @navn.setter
    def navn(self, navn):
        """Sets the navn of this Vegobjekttype.


        :param navn: The navn of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._navn = navn

    @property
    def beskrivelse(self):
        """Gets the beskrivelse of this Vegobjekttype.  # noqa: E501


        :return: The beskrivelse of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._beskrivelse

    @beskrivelse.setter
    def beskrivelse(self, beskrivelse):
        """Sets the beskrivelse of this Vegobjekttype.


        :param beskrivelse: The beskrivelse of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._beskrivelse = beskrivelse

    @property
    def stedfesting(self):
        """Gets the stedfesting of this Vegobjekttype.  # noqa: E501

        TODO  # noqa: E501

        :return: The stedfesting of this Vegobjekttype.  # noqa: E501
        :rtype: Object
        """
        return self._stedfesting

    @stedfesting.setter
    def stedfesting(self, stedfesting):
        """Sets the stedfesting of this Vegobjekttype.

        TODO  # noqa: E501

        :param stedfesting: The stedfesting of this Vegobjekttype.  # noqa: E501
        :type: Object
        """

        self._stedfesting = stedfesting

    @property
    def objektliste_dato(self):
        """Gets the objektliste_dato of this Vegobjekttype.  # noqa: E501

        Dato for n책r vegobjekttypen ble en del av objektlista. Om feltet ikke har noen verdi, er ikke vegobjekttypen en del av objektlista  # noqa: E501

        :return: The objektliste_dato of this Vegobjekttype.  # noqa: E501
        :rtype: date
        """
        return self._objektliste_dato

    @objektliste_dato.setter
    def objektliste_dato(self, objektliste_dato):
        """Sets the objektliste_dato of this Vegobjekttype.

        Dato for n책r vegobjekttypen ble en del av objektlista. Om feltet ikke har noen verdi, er ikke vegobjekttypen en del av objektlista  # noqa: E501

        :param objektliste_dato: The objektliste_dato of this Vegobjekttype.  # noqa: E501
        :type: date
        """

        self._objektliste_dato = objektliste_dato

    @property
    def veiledning(self):
        """Gets the veiledning of this Vegobjekttype.  # noqa: E501

        Supplerende informasjon til beskrivelsen, for eksempel en registreringsveiledning  # noqa: E501

        :return: The veiledning of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._veiledning

    @veiledning.setter
    def veiledning(self, veiledning):
        """Sets the veiledning of this Vegobjekttype.

        Supplerende informasjon til beskrivelsen, for eksempel en registreringsveiledning  # noqa: E501

        :param veiledning: The veiledning of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._veiledning = veiledning

    @property
    def sosinvdbnavn(self):
        """Gets the sosinvdbnavn of this Vegobjekttype.  # noqa: E501

        Navn som brukes i dataleveranser  # noqa: E501

        :return: The sosinvdbnavn of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._sosinvdbnavn

    @sosinvdbnavn.setter
    def sosinvdbnavn(self, sosinvdbnavn):
        """Sets the sosinvdbnavn of this Vegobjekttype.

        Navn som brukes i dataleveranser  # noqa: E501

        :param sosinvdbnavn: The sosinvdbnavn of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._sosinvdbnavn = sosinvdbnavn

    @property
    def sosinavn(self):
        """Gets the sosinavn of this Vegobjekttype.  # noqa: E501

        Navn som brukes i dataleveranser  # noqa: E501

        :return: The sosinavn of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._sosinavn

    @sosinavn.setter
    def sosinavn(self, sosinavn):
        """Sets the sosinavn of this Vegobjekttype.

        Navn som brukes i dataleveranser  # noqa: E501

        :param sosinavn: The sosinavn of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._sosinavn = sosinavn

    @property
    def sorteringsnummer(self):
        """Gets the sorteringsnummer of this Vegobjekttype.  # noqa: E501

        For bruk i sortering av objektlista  # noqa: E501

        :return: The sorteringsnummer of this Vegobjekttype.  # noqa: E501
        :rtype: int
        """
        return self._sorteringsnummer

    @sorteringsnummer.setter
    def sorteringsnummer(self, sorteringsnummer):
        """Sets the sorteringsnummer of this Vegobjekttype.

        For bruk i sortering av objektlista  # noqa: E501

        :param sorteringsnummer: The sorteringsnummer of this Vegobjekttype.  # noqa: E501
        :type: int
        """

        self._sorteringsnummer = sorteringsnummer

    @property
    def kategorier(self):
        """Gets the kategorier of this Vegobjekttype.  # noqa: E501

        Hvilke kategorier denne vegobjekttypen h첩rer til  # noqa: E501

        :return: The kategorier of this Vegobjekttype.  # noqa: E501
        :rtype: list[VegobjekttypeKategorier]
        """
        return self._kategorier

    @kategorier.setter
    def kategorier(self, kategorier):
        """Sets the kategorier of this Vegobjekttype.

        Hvilke kategorier denne vegobjekttypen h첩rer til  # noqa: E501

        :param kategorier: The kategorier of this Vegobjekttype.  # noqa: E501
        :type: list[VegobjekttypeKategorier]
        """

        self._kategorier = kategorier

    @property
    def egenskaper(self):
        """Gets the egenskaper of this Vegobjekttype.  # noqa: E501


        :return: The egenskaper of this Vegobjekttype.  # noqa: E501
        :rtype: list[VegobjekttypeEgenskap]
        """
        return self._egenskaper

    @egenskaper.setter
    def egenskaper(self, egenskaper):
        """Sets the egenskaper of this Vegobjekttype.


        :param egenskaper: The egenskaper of this Vegobjekttype.  # noqa: E501
        :type: list[VegobjekttypeEgenskap]
        """

        self._egenskaper = egenskaper

    @property
    def relasjonstyper(self):
        """Gets the relasjonstyper of this Vegobjekttype.  # noqa: E501

        TODO  # noqa: E501

        :return: The relasjonstyper of this Vegobjekttype.  # noqa: E501
        :rtype: list[VegobjekttypeRelasjonstyper]
        """
        return self._relasjonstyper

    @relasjonstyper.setter
    def relasjonstyper(self, relasjonstyper):
        """Sets the relasjonstyper of this Vegobjekttype.

        TODO  # noqa: E501

        :param relasjonstyper: The relasjonstyper of this Vegobjekttype.  # noqa: E501
        :type: list[VegobjekttypeRelasjonstyper]
        """

        self._relasjonstyper = relasjonstyper

    @property
    def status(self):
        """Gets the status of this Vegobjekttype.  # noqa: E501


        :return: The status of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Vegobjekttype.


        :param status: The status of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def hovedkategori(self):
        """Gets the hovedkategori of this Vegobjekttype.  # noqa: E501


        :return: The hovedkategori of this Vegobjekttype.  # noqa: E501
        :rtype: str
        """
        return self._hovedkategori

    @hovedkategori.setter
    def hovedkategori(self, hovedkategori):
        """Sets the hovedkategori of this Vegobjekttype.


        :param hovedkategori: The hovedkategori of this Vegobjekttype.  # noqa: E501
        :type: str
        """

        self._hovedkategori = hovedkategori

    @property
    def dekningsgrad(self):
        """Gets the dekningsgrad of this Vegobjekttype.  # noqa: E501

        Angir om eksisterende objekter skal bli automatisk splittet n책r de overlapper med nye objekter. true=Skal splittes, false=Skal ikke splittes  # noqa: E501

        :return: The dekningsgrad of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._dekningsgrad

    @dekningsgrad.setter
    def dekningsgrad(self, dekningsgrad):
        """Sets the dekningsgrad of this Vegobjekttype.

        Angir om eksisterende objekter skal bli automatisk splittet n책r de overlapper med nye objekter. true=Skal splittes, false=Skal ikke splittes  # noqa: E501

        :param dekningsgrad: The dekningsgrad of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._dekningsgrad = dekningsgrad

    @property
    def tidsrom_relevant(self):
        """Gets the tidsrom_relevant of this Vegobjekttype.  # noqa: E501

        Angir om vegobjektene normalt har en gyldighetsperiode p책 operativt vegnett  # noqa: E501

        :return: The tidsrom_relevant of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._tidsrom_relevant

    @tidsrom_relevant.setter
    def tidsrom_relevant(self, tidsrom_relevant):
        """Sets the tidsrom_relevant of this Vegobjekttype.

        Angir om vegobjektene normalt har en gyldighetsperiode p책 operativt vegnett  # noqa: E501

        :param tidsrom_relevant: The tidsrom_relevant of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._tidsrom_relevant = tidsrom_relevant

    @property
    def konnekteringslenke_ok(self):
        """Gets the konnekteringslenke_ok of this Vegobjekttype.  # noqa: E501

        Angir om vegobjekter av denne typen skal kunne stedfestes p책 konnekteringslenker  # noqa: E501

        :return: The konnekteringslenke_ok of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._konnekteringslenke_ok

    @konnekteringslenke_ok.setter
    def konnekteringslenke_ok(self, konnekteringslenke_ok):
        """Sets the konnekteringslenke_ok of this Vegobjekttype.

        Angir om vegobjekter av denne typen skal kunne stedfestes p책 konnekteringslenker  # noqa: E501

        :param konnekteringslenke_ok: The konnekteringslenke_ok of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._konnekteringslenke_ok = konnekteringslenke_ok

    @property
    def abstrakt_type(self):
        """Gets the abstrakt_type of this Vegobjekttype.  # noqa: E501

        Angir om vegobjekttype er abstrakt eller ikke. En abstrakt vegobjekttype skal ikke kunne ha forekomster i NVDB.  # noqa: E501

        :return: The abstrakt_type of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._abstrakt_type

    @abstrakt_type.setter
    def abstrakt_type(self, abstrakt_type):
        """Sets the abstrakt_type of this Vegobjekttype.

        Angir om vegobjekttype er abstrakt eller ikke. En abstrakt vegobjekttype skal ikke kunne ha forekomster i NVDB.  # noqa: E501

        :param abstrakt_type: The abstrakt_type of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._abstrakt_type = abstrakt_type

    @property
    def m_ha_mor(self):
        """Gets the m_ha_mor of this Vegobjekttype.  # noqa: E501

        Angir hvorvidt vegobjektene m책 v챈re tilknyttet et morobjekt for 책 kunne eksistere.  # noqa: E501

        :return: The m_ha_mor of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._m_ha_mor

    @m_ha_mor.setter
    def m_ha_mor(self, m_ha_mor):
        """Sets the m_ha_mor of this Vegobjekttype.

        Angir hvorvidt vegobjektene m책 v챈re tilknyttet et morobjekt for 책 kunne eksistere.  # noqa: E501

        :param m_ha_mor: The m_ha_mor of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._m_ha_mor = m_ha_mor

    @property
    def er_dataserie(self):
        """Gets the er_dataserie of this Vegobjekttype.  # noqa: E501


        :return: The er_dataserie of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._er_dataserie

    @er_dataserie.setter
    def er_dataserie(self, er_dataserie):
        """Sets the er_dataserie of this Vegobjekttype.


        :param er_dataserie: The er_dataserie of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._er_dataserie = er_dataserie

    @property
    def en_versjon(self):
        """Gets the en_versjon of this Vegobjekttype.  # noqa: E501

        Angir om det er tillatt med kun 챕n versjon av et vegobjekt.  # noqa: E501

        :return: The en_versjon of this Vegobjekttype.  # noqa: E501
        :rtype: bool
        """
        return self._en_versjon

    @en_versjon.setter
    def en_versjon(self, en_versjon):
        """Sets the en_versjon of this Vegobjekttype.

        Angir om det er tillatt med kun 챕n versjon av et vegobjekt.  # noqa: E501

        :param en_versjon: The en_versjon of this Vegobjekttype.  # noqa: E501
        :type: bool
        """

        self._en_versjon = en_versjon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vegobjekttype, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vegobjekttype):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
