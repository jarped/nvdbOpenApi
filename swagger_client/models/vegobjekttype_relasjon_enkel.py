# coding: utf-8

"""
    NVDB API LES V3

    API for Ã¥ lese vegobjekter, vegnett og transaksjoner fra NVDB  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: nvdb@vegvesen.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VegobjekttypeRelasjonEnkel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'innenfor_mor': 'str',
        'relasjonstype': 'str',
        'type': 'VegobjekttyperelasjonenkelType'
    }

    attribute_map = {
        'innenfor_mor': 'innenfor_mor',
        'relasjonstype': 'relasjonstype',
        'type': 'type'
    }

    def __init__(self, innenfor_mor=None, relasjonstype=None, type=None):  # noqa: E501
        """VegobjekttypeRelasjonEnkel - a model defined in Swagger"""  # noqa: E501
        self._innenfor_mor = None
        self._relasjonstype = None
        self._type = None
        self.discriminator = None
        if innenfor_mor is not None:
            self.innenfor_mor = innenfor_mor
        if relasjonstype is not None:
            self.relasjonstype = relasjonstype
        if type is not None:
            self.type = type

    @property
    def innenfor_mor(self):
        """Gets the innenfor_mor of this VegobjekttypeRelasjonEnkel.  # noqa: E501


        :return: The innenfor_mor of this VegobjekttypeRelasjonEnkel.  # noqa: E501
        :rtype: str
        """
        return self._innenfor_mor

    @innenfor_mor.setter
    def innenfor_mor(self, innenfor_mor):
        """Sets the innenfor_mor of this VegobjekttypeRelasjonEnkel.


        :param innenfor_mor: The innenfor_mor of this VegobjekttypeRelasjonEnkel.  # noqa: E501
        :type: str
        """
        allowed_values = ["JA", "NEI", "MED_AVVIK"]  # noqa: E501
        if innenfor_mor not in allowed_values:
            raise ValueError(
                "Invalid value for `innenfor_mor` ({0}), must be one of {1}"  # noqa: E501
                .format(innenfor_mor, allowed_values)
            )

        self._innenfor_mor = innenfor_mor

    @property
    def relasjonstype(self):
        """Gets the relasjonstype of this VegobjekttypeRelasjonEnkel.  # noqa: E501


        :return: The relasjonstype of this VegobjekttypeRelasjonEnkel.  # noqa: E501
        :rtype: str
        """
        return self._relasjonstype

    @relasjonstype.setter
    def relasjonstype(self, relasjonstype):
        """Sets the relasjonstype of this VegobjekttypeRelasjonEnkel.


        :param relasjonstype: The relasjonstype of this VegobjekttypeRelasjonEnkel.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASSOSIASJON", "AGGREGERING", "KOMPOSISJON", "TOPOLOGI"]  # noqa: E501
        if relasjonstype not in allowed_values:
            raise ValueError(
                "Invalid value for `relasjonstype` ({0}), must be one of {1}"  # noqa: E501
                .format(relasjonstype, allowed_values)
            )

        self._relasjonstype = relasjonstype

    @property
    def type(self):
        """Gets the type of this VegobjekttypeRelasjonEnkel.  # noqa: E501


        :return: The type of this VegobjekttypeRelasjonEnkel.  # noqa: E501
        :rtype: VegobjekttyperelasjonenkelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VegobjekttypeRelasjonEnkel.


        :param type: The type of this VegobjekttypeRelasjonEnkel.  # noqa: E501
        :type: VegobjekttyperelasjonenkelType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VegobjekttypeRelasjonEnkel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VegobjekttypeRelasjonEnkel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
